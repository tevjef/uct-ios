// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file model.proto

import Foundation
import ProtocolBuffers


public struct Common { }

public func == (lhs: Common.University, rhs: Common.University) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.hasAbbr == rhs.hasAbbr) && (!lhs.hasAbbr || lhs.abbr == rhs.abbr)
  fieldCheck = fieldCheck && (lhs.hasHomePage == rhs.hasHomePage) && (!lhs.hasHomePage || lhs.homePage == rhs.homePage)
  fieldCheck = fieldCheck && (lhs.hasRegistrationPage == rhs.hasRegistrationPage) && (!lhs.hasRegistrationPage || lhs.registrationPage == rhs.registrationPage)
  fieldCheck = fieldCheck && (lhs.hasMainColor == rhs.hasMainColor) && (!lhs.hasMainColor || lhs.mainColor == rhs.mainColor)
  fieldCheck = fieldCheck && (lhs.hasAccentColor == rhs.hasAccentColor) && (!lhs.hasAccentColor || lhs.accentColor == rhs.accentColor)
  fieldCheck = fieldCheck && (lhs.hasTopicName == rhs.hasTopicName) && (!lhs.hasTopicName || lhs.topicName == rhs.topicName)
  fieldCheck = fieldCheck && (lhs.hasTopicId == rhs.hasTopicId) && (!lhs.hasTopicId || lhs.topicId == rhs.topicId)
  fieldCheck = fieldCheck && (lhs.hasResolvedSemesters == rhs.hasResolvedSemesters) && (!lhs.hasResolvedSemesters || lhs.resolvedSemesters == rhs.resolvedSemesters)
  fieldCheck = fieldCheck && (lhs.subjects == rhs.subjects)
  fieldCheck = fieldCheck && (lhs.availableSemesters == rhs.availableSemesters)
  fieldCheck = fieldCheck && (lhs.registrations == rhs.registrations)
  fieldCheck = fieldCheck && (lhs.metadata == rhs.metadata)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Common.Subject, rhs: Common.Subject) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasUniversityId == rhs.hasUniversityId) && (!lhs.hasUniversityId || lhs.universityId == rhs.universityId)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.hasNumber == rhs.hasNumber) && (!lhs.hasNumber || lhs.number == rhs.number)
  fieldCheck = fieldCheck && (lhs.hasSeason == rhs.hasSeason) && (!lhs.hasSeason || lhs.season == rhs.season)
  fieldCheck = fieldCheck && (lhs.hasYear == rhs.hasYear) && (!lhs.hasYear || lhs.year == rhs.year)
  fieldCheck = fieldCheck && (lhs.hasTopicName == rhs.hasTopicName) && (!lhs.hasTopicName || lhs.topicName == rhs.topicName)
  fieldCheck = fieldCheck && (lhs.hasTopicId == rhs.hasTopicId) && (!lhs.hasTopicId || lhs.topicId == rhs.topicId)
  fieldCheck = fieldCheck && (lhs.courses == rhs.courses)
  fieldCheck = fieldCheck && (lhs.metadata == rhs.metadata)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Common.Course, rhs: Common.Course) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasSubjectId == rhs.hasSubjectId) && (!lhs.hasSubjectId || lhs.subjectId == rhs.subjectId)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.hasNumber == rhs.hasNumber) && (!lhs.hasNumber || lhs.number == rhs.number)
  fieldCheck = fieldCheck && (lhs.hasSynopsis == rhs.hasSynopsis) && (!lhs.hasSynopsis || lhs.synopsis == rhs.synopsis)
  fieldCheck = fieldCheck && (lhs.hasTopicName == rhs.hasTopicName) && (!lhs.hasTopicName || lhs.topicName == rhs.topicName)
  fieldCheck = fieldCheck && (lhs.hasTopicId == rhs.hasTopicId) && (!lhs.hasTopicId || lhs.topicId == rhs.topicId)
  fieldCheck = fieldCheck && (lhs.sections == rhs.sections)
  fieldCheck = fieldCheck && (lhs.metadata == rhs.metadata)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Common.Section, rhs: Common.Section) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasCourseId == rhs.hasCourseId) && (!lhs.hasCourseId || lhs.courseId == rhs.courseId)
  fieldCheck = fieldCheck && (lhs.hasNumber == rhs.hasNumber) && (!lhs.hasNumber || lhs.number == rhs.number)
  fieldCheck = fieldCheck && (lhs.hasCallNumber == rhs.hasCallNumber) && (!lhs.hasCallNumber || lhs.callNumber == rhs.callNumber)
  fieldCheck = fieldCheck && (lhs.hasMax == rhs.hasMax) && (!lhs.hasMax || lhs.max == rhs.max)
  fieldCheck = fieldCheck && (lhs.hasNow == rhs.hasNow) && (!lhs.hasNow || lhs.now == rhs.now)
  fieldCheck = fieldCheck && (lhs.hasStatus == rhs.hasStatus) && (!lhs.hasStatus || lhs.status == rhs.status)
  fieldCheck = fieldCheck && (lhs.hasCredits == rhs.hasCredits) && (!lhs.hasCredits || lhs.credits == rhs.credits)
  fieldCheck = fieldCheck && (lhs.hasTopicName == rhs.hasTopicName) && (!lhs.hasTopicName || lhs.topicName == rhs.topicName)
  fieldCheck = fieldCheck && (lhs.hasTopicId == rhs.hasTopicId) && (!lhs.hasTopicId || lhs.topicId == rhs.topicId)
  fieldCheck = fieldCheck && (lhs.meetings == rhs.meetings)
  fieldCheck = fieldCheck && (lhs.instructors == rhs.instructors)
  fieldCheck = fieldCheck && (lhs.books == rhs.books)
  fieldCheck = fieldCheck && (lhs.metadata == rhs.metadata)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Common.Meeting, rhs: Common.Meeting) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasSectionId == rhs.hasSectionId) && (!lhs.hasSectionId || lhs.sectionId == rhs.sectionId)
  fieldCheck = fieldCheck && (lhs.hasRoom == rhs.hasRoom) && (!lhs.hasRoom || lhs.room == rhs.room)
  fieldCheck = fieldCheck && (lhs.hasDay == rhs.hasDay) && (!lhs.hasDay || lhs.day == rhs.day)
  fieldCheck = fieldCheck && (lhs.hasStartTime == rhs.hasStartTime) && (!lhs.hasStartTime || lhs.startTime == rhs.startTime)
  fieldCheck = fieldCheck && (lhs.hasEndTime == rhs.hasEndTime) && (!lhs.hasEndTime || lhs.endTime == rhs.endTime)
  fieldCheck = fieldCheck && (lhs.hasClassType == rhs.hasClassType) && (!lhs.hasClassType || lhs.classType == rhs.classType)
  fieldCheck = fieldCheck && (lhs.hasIndex == rhs.hasIndex) && (!lhs.hasIndex || lhs.index == rhs.index)
  fieldCheck = fieldCheck && (lhs.metadata == rhs.metadata)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Common.Instructor, rhs: Common.Instructor) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasSectionId == rhs.hasSectionId) && (!lhs.hasSectionId || lhs.sectionId == rhs.sectionId)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.hasIndex == rhs.hasIndex) && (!lhs.hasIndex || lhs.index == rhs.index)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Common.Book, rhs: Common.Book) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasSectionId == rhs.hasSectionId) && (!lhs.hasSectionId || lhs.sectionId == rhs.sectionId)
  fieldCheck = fieldCheck && (lhs.hasTitle == rhs.hasTitle) && (!lhs.hasTitle || lhs.title == rhs.title)
  fieldCheck = fieldCheck && (lhs.hasUrl == rhs.hasUrl) && (!lhs.hasUrl || lhs.url == rhs.url)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Common.Metadata, rhs: Common.Metadata) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasUniversityId == rhs.hasUniversityId) && (!lhs.hasUniversityId || lhs.universityId == rhs.universityId)
  fieldCheck = fieldCheck && (lhs.hasSubjectId == rhs.hasSubjectId) && (!lhs.hasSubjectId || lhs.subjectId == rhs.subjectId)
  fieldCheck = fieldCheck && (lhs.hasCourseId == rhs.hasCourseId) && (!lhs.hasCourseId || lhs.courseId == rhs.courseId)
  fieldCheck = fieldCheck && (lhs.hasSectionId == rhs.hasSectionId) && (!lhs.hasSectionId || lhs.sectionId == rhs.sectionId)
  fieldCheck = fieldCheck && (lhs.hasMeetingId == rhs.hasMeetingId) && (!lhs.hasMeetingId || lhs.meetingId == rhs.meetingId)
  fieldCheck = fieldCheck && (lhs.hasTitle == rhs.hasTitle) && (!lhs.hasTitle || lhs.title == rhs.title)
  fieldCheck = fieldCheck && (lhs.hasContent == rhs.hasContent) && (!lhs.hasContent || lhs.content == rhs.content)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Common.Registration, rhs: Common.Registration) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasUniversityId == rhs.hasUniversityId) && (!lhs.hasUniversityId || lhs.universityId == rhs.universityId)
  fieldCheck = fieldCheck && (lhs.hasPeriod == rhs.hasPeriod) && (!lhs.hasPeriod || lhs.period == rhs.period)
  fieldCheck = fieldCheck && (lhs.hasPeriodDate == rhs.hasPeriodDate) && (!lhs.hasPeriodDate || lhs.periodDate == rhs.periodDate)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Common.ResolvedSemester, rhs: Common.ResolvedSemester) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasCurrent == rhs.hasCurrent) && (!lhs.hasCurrent || lhs.current == rhs.current)
  fieldCheck = fieldCheck && (lhs.hasLast == rhs.hasLast) && (!lhs.hasLast || lhs.last == rhs.last)
  fieldCheck = fieldCheck && (lhs.hasNext == rhs.hasNext) && (!lhs.hasNext || lhs.next == rhs.next)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Common.Semester, rhs: Common.Semester) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasYear == rhs.hasYear) && (!lhs.hasYear || lhs.year == rhs.year)
  fieldCheck = fieldCheck && (lhs.hasSeason == rhs.hasSeason) && (!lhs.hasSeason || lhs.season == rhs.season)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Common.Uctnotification, rhs: Common.Uctnotification) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasNotificationId == rhs.hasNotificationId) && (!lhs.hasNotificationId || lhs.notificationId == rhs.notificationId)
  fieldCheck = fieldCheck && (lhs.hasTopicName == rhs.hasTopicName) && (!lhs.hasTopicName || lhs.topicName == rhs.topicName)
  fieldCheck = fieldCheck && (lhs.hasStatus == rhs.hasStatus) && (!lhs.hasStatus || lhs.status == rhs.status)
  fieldCheck = fieldCheck && (lhs.hasUniversity == rhs.hasUniversity) && (!lhs.hasUniversity || lhs.university == rhs.university)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Common.Response, rhs: Common.Response) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasMeta == rhs.hasMeta) && (!lhs.hasMeta || lhs.meta == rhs.meta)
  fieldCheck = fieldCheck && (lhs.hasData == rhs.hasData) && (!lhs.hasData || lhs.data == rhs.data)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Common.Meta, rhs: Common.Meta) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasCode == rhs.hasCode) && (!lhs.hasCode || lhs.code == rhs.code)
  fieldCheck = fieldCheck && (lhs.hasMessage_ == rhs.hasMessage_) && (!lhs.hasMessage_ || lhs.message_ == rhs.message_)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Common.Data, rhs: Common.Data) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.universities == rhs.universities)
  fieldCheck = fieldCheck && (lhs.subjects == rhs.subjects)
  fieldCheck = fieldCheck && (lhs.courses == rhs.courses)
  fieldCheck = fieldCheck && (lhs.sections == rhs.sections)
  fieldCheck = fieldCheck && (lhs.hasUniversity == rhs.hasUniversity) && (!lhs.hasUniversity || lhs.university == rhs.university)
  fieldCheck = fieldCheck && (lhs.hasSubject == rhs.hasSubject) && (!lhs.hasSubject || lhs.subject == rhs.subject)
  fieldCheck = fieldCheck && (lhs.hasCourse == rhs.hasCourse) && (!lhs.hasCourse || lhs.course == rhs.course)
  fieldCheck = fieldCheck && (lhs.hasSection == rhs.hasSection) && (!lhs.hasSection || lhs.section == rhs.section)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Common {
  public struct ModelRoot {
    public static var sharedInstance : ModelRoot {
     struct Static {
         static let instance : ModelRoot = ModelRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Gogoproto.GogoRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class University : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var id:Int64 = Int64(0)

    public private(set) var hasId:Bool = false
    public private(set) var name:String = ""

    public private(set) var hasName:Bool = false
    public private(set) var abbr:String = ""

    public private(set) var hasAbbr:Bool = false
    public private(set) var homePage:String = ""

    public private(set) var hasHomePage:Bool = false
    public private(set) var registrationPage:String = ""

    public private(set) var hasRegistrationPage:Bool = false
    public private(set) var mainColor:String = ""

    public private(set) var hasMainColor:Bool = false
    public private(set) var accentColor:String = ""

    public private(set) var hasAccentColor:Bool = false
    public private(set) var topicName:String = ""

    public private(set) var hasTopicName:Bool = false
    public private(set) var topicId:String = ""

    public private(set) var hasTopicId:Bool = false
    public private(set) var resolvedSemesters:Common.ResolvedSemester!
    public private(set) var hasResolvedSemesters:Bool = false
    public private(set) var subjects:Array<Common.Subject>  = Array<Common.Subject>()
    public private(set) var availableSemesters:Array<Common.Semester>  = Array<Common.Semester>()
    public private(set) var registrations:Array<Common.Registration>  = Array<Common.Registration>()
    public private(set) var metadata:Array<Common.Metadata>  = Array<Common.Metadata>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasId {
        try output.writeInt64(1, value:id)
      }
      if hasName {
        try output.writeString(2, value:name)
      }
      if hasAbbr {
        try output.writeString(3, value:abbr)
      }
      if hasHomePage {
        try output.writeString(4, value:homePage)
      }
      if hasRegistrationPage {
        try output.writeString(5, value:registrationPage)
      }
      if hasMainColor {
        try output.writeString(6, value:mainColor)
      }
      if hasAccentColor {
        try output.writeString(7, value:accentColor)
      }
      if hasTopicName {
        try output.writeString(8, value:topicName)
      }
      if hasTopicId {
        try output.writeString(9, value:topicId)
      }
      if hasResolvedSemesters {
        try output.writeMessage(10, value:resolvedSemesters)
      }
      for oneElementsubjects in subjects {
          try output.writeMessage(11, value:oneElementsubjects)
      }
      for oneElementavailableSemesters in availableSemesters {
          try output.writeMessage(12, value:oneElementavailableSemesters)
      }
      for oneElementregistrations in registrations {
          try output.writeMessage(13, value:oneElementregistrations)
      }
      for oneElementmetadata in metadata {
          try output.writeMessage(14, value:oneElementmetadata)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasId {
        serialize_size += id.computeInt64Size(1)
      }
      if hasName {
        serialize_size += name.computeStringSize(2)
      }
      if hasAbbr {
        serialize_size += abbr.computeStringSize(3)
      }
      if hasHomePage {
        serialize_size += homePage.computeStringSize(4)
      }
      if hasRegistrationPage {
        serialize_size += registrationPage.computeStringSize(5)
      }
      if hasMainColor {
        serialize_size += mainColor.computeStringSize(6)
      }
      if hasAccentColor {
        serialize_size += accentColor.computeStringSize(7)
      }
      if hasTopicName {
        serialize_size += topicName.computeStringSize(8)
      }
      if hasTopicId {
        serialize_size += topicId.computeStringSize(9)
      }
      if hasResolvedSemesters {
          if let varSizeresolvedSemesters = resolvedSemesters?.computeMessageSize(10) {
              serialize_size += varSizeresolvedSemesters
          }
      }
      for oneElementsubjects in subjects {
          serialize_size += oneElementsubjects.computeMessageSize(11)
      }
      for oneElementavailableSemesters in availableSemesters {
          serialize_size += oneElementavailableSemesters.computeMessageSize(12)
      }
      for oneElementregistrations in registrations {
          serialize_size += oneElementregistrations.computeMessageSize(13)
      }
      for oneElementmetadata in metadata {
          serialize_size += oneElementmetadata.computeMessageSize(14)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Common.University> {
      var mergedArray = Array<Common.University>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Common.University? {
      return try Common.University.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Common.University {
      return try Common.University.Builder().mergeFromData(data, extensionRegistry:Common.ModelRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Common.University {
      return try Common.University.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Common.University {
      return try Common.University.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Common.University {
      return try Common.University.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Common.University {
      return try Common.University.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Common.University {
      return try Common.University.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Common.University.Builder {
      return Common.University.classBuilder() as! Common.University.Builder
    }
    public func getBuilder() -> Common.University.Builder {
      return classBuilder() as! Common.University.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Common.University.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Common.University.Builder()
    }
    public func toBuilder() throws -> Common.University.Builder {
      return try Common.University.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Common.University) throws -> Common.University.Builder {
      return try Common.University.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasName {
        output += "\(indent) name: \(name) \n"
      }
      if hasAbbr {
        output += "\(indent) abbr: \(abbr) \n"
      }
      if hasHomePage {
        output += "\(indent) homePage: \(homePage) \n"
      }
      if hasRegistrationPage {
        output += "\(indent) registrationPage: \(registrationPage) \n"
      }
      if hasMainColor {
        output += "\(indent) mainColor: \(mainColor) \n"
      }
      if hasAccentColor {
        output += "\(indent) accentColor: \(accentColor) \n"
      }
      if hasTopicName {
        output += "\(indent) topicName: \(topicName) \n"
      }
      if hasTopicId {
        output += "\(indent) topicId: \(topicId) \n"
      }
      if hasResolvedSemesters {
        output += "\(indent) resolvedSemesters {\n"
        if let outDescResolvedSemesters = resolvedSemesters {
          output += try outDescResolvedSemesters.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      var subjectsElementIndex:Int = 0
      for oneElementsubjects in subjects {
          output += "\(indent) subjects[\(subjectsElementIndex)] {\n"
          output += try oneElementsubjects.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          subjectsElementIndex += 1
      }
      var availableSemestersElementIndex:Int = 0
      for oneElementavailableSemesters in availableSemesters {
          output += "\(indent) availableSemesters[\(availableSemestersElementIndex)] {\n"
          output += try oneElementavailableSemesters.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          availableSemestersElementIndex += 1
      }
      var registrationsElementIndex:Int = 0
      for oneElementregistrations in registrations {
          output += "\(indent) registrations[\(registrationsElementIndex)] {\n"
          output += try oneElementregistrations.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          registrationsElementIndex += 1
      }
      var metadataElementIndex:Int = 0
      for oneElementmetadata in metadata {
          output += "\(indent) metadata[\(metadataElementIndex)] {\n"
          output += try oneElementmetadata.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          metadataElementIndex += 1
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasName {
               hashCode = (hashCode &* 31) &+ name.hashValue
            }
            if hasAbbr {
               hashCode = (hashCode &* 31) &+ abbr.hashValue
            }
            if hasHomePage {
               hashCode = (hashCode &* 31) &+ homePage.hashValue
            }
            if hasRegistrationPage {
               hashCode = (hashCode &* 31) &+ registrationPage.hashValue
            }
            if hasMainColor {
               hashCode = (hashCode &* 31) &+ mainColor.hashValue
            }
            if hasAccentColor {
               hashCode = (hashCode &* 31) &+ accentColor.hashValue
            }
            if hasTopicName {
               hashCode = (hashCode &* 31) &+ topicName.hashValue
            }
            if hasTopicId {
               hashCode = (hashCode &* 31) &+ topicId.hashValue
            }
            if hasResolvedSemesters {
                if let hashValueresolvedSemesters = resolvedSemesters?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueresolvedSemesters
                }
            }
            for oneElementsubjects in subjects {
                hashCode = (hashCode &* 31) &+ oneElementsubjects.hashValue
            }
            for oneElementavailableSemesters in availableSemesters {
                hashCode = (hashCode &* 31) &+ oneElementavailableSemesters.hashValue
            }
            for oneElementregistrations in registrations {
                hashCode = (hashCode &* 31) &+ oneElementregistrations.hashValue
            }
            for oneElementmetadata in metadata {
                hashCode = (hashCode &* 31) &+ oneElementmetadata.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Common.University"
    }
    override public func className() -> String {
        return "Common.University"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Common.University.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Common.University = Common.University()
      public func getMessage() -> Common.University {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasId:Bool {
           get {
                return builderResult.hasId
           }
      }
      public var id:Int64 {
           get {
                return builderResult.id
           }
           set (value) {
               builderResult.hasId = true
               builderResult.id = value
           }
      }
      public func setId(value:Int64) -> Common.University.Builder {
        self.id = value
        return self
      }
      public func clearId() -> Common.University.Builder{
           builderResult.hasId = false
           builderResult.id = Int64(0)
           return self
      }
      public var hasName:Bool {
           get {
                return builderResult.hasName
           }
      }
      public var name:String {
           get {
                return builderResult.name
           }
           set (value) {
               builderResult.hasName = true
               builderResult.name = value
           }
      }
      public func setName(value:String) -> Common.University.Builder {
        self.name = value
        return self
      }
      public func clearName() -> Common.University.Builder{
           builderResult.hasName = false
           builderResult.name = ""
           return self
      }
      public var hasAbbr:Bool {
           get {
                return builderResult.hasAbbr
           }
      }
      public var abbr:String {
           get {
                return builderResult.abbr
           }
           set (value) {
               builderResult.hasAbbr = true
               builderResult.abbr = value
           }
      }
      public func setAbbr(value:String) -> Common.University.Builder {
        self.abbr = value
        return self
      }
      public func clearAbbr() -> Common.University.Builder{
           builderResult.hasAbbr = false
           builderResult.abbr = ""
           return self
      }
      public var hasHomePage:Bool {
           get {
                return builderResult.hasHomePage
           }
      }
      public var homePage:String {
           get {
                return builderResult.homePage
           }
           set (value) {
               builderResult.hasHomePage = true
               builderResult.homePage = value
           }
      }
      public func setHomePage(value:String) -> Common.University.Builder {
        self.homePage = value
        return self
      }
      public func clearHomePage() -> Common.University.Builder{
           builderResult.hasHomePage = false
           builderResult.homePage = ""
           return self
      }
      public var hasRegistrationPage:Bool {
           get {
                return builderResult.hasRegistrationPage
           }
      }
      public var registrationPage:String {
           get {
                return builderResult.registrationPage
           }
           set (value) {
               builderResult.hasRegistrationPage = true
               builderResult.registrationPage = value
           }
      }
      public func setRegistrationPage(value:String) -> Common.University.Builder {
        self.registrationPage = value
        return self
      }
      public func clearRegistrationPage() -> Common.University.Builder{
           builderResult.hasRegistrationPage = false
           builderResult.registrationPage = ""
           return self
      }
      public var hasMainColor:Bool {
           get {
                return builderResult.hasMainColor
           }
      }
      public var mainColor:String {
           get {
                return builderResult.mainColor
           }
           set (value) {
               builderResult.hasMainColor = true
               builderResult.mainColor = value
           }
      }
      public func setMainColor(value:String) -> Common.University.Builder {
        self.mainColor = value
        return self
      }
      public func clearMainColor() -> Common.University.Builder{
           builderResult.hasMainColor = false
           builderResult.mainColor = ""
           return self
      }
      public var hasAccentColor:Bool {
           get {
                return builderResult.hasAccentColor
           }
      }
      public var accentColor:String {
           get {
                return builderResult.accentColor
           }
           set (value) {
               builderResult.hasAccentColor = true
               builderResult.accentColor = value
           }
      }
      public func setAccentColor(value:String) -> Common.University.Builder {
        self.accentColor = value
        return self
      }
      public func clearAccentColor() -> Common.University.Builder{
           builderResult.hasAccentColor = false
           builderResult.accentColor = ""
           return self
      }
      public var hasTopicName:Bool {
           get {
                return builderResult.hasTopicName
           }
      }
      public var topicName:String {
           get {
                return builderResult.topicName
           }
           set (value) {
               builderResult.hasTopicName = true
               builderResult.topicName = value
           }
      }
      public func setTopicName(value:String) -> Common.University.Builder {
        self.topicName = value
        return self
      }
      public func clearTopicName() -> Common.University.Builder{
           builderResult.hasTopicName = false
           builderResult.topicName = ""
           return self
      }
      public var hasTopicId:Bool {
           get {
                return builderResult.hasTopicId
           }
      }
      public var topicId:String {
           get {
                return builderResult.topicId
           }
           set (value) {
               builderResult.hasTopicId = true
               builderResult.topicId = value
           }
      }
      public func setTopicId(value:String) -> Common.University.Builder {
        self.topicId = value
        return self
      }
      public func clearTopicId() -> Common.University.Builder{
           builderResult.hasTopicId = false
           builderResult.topicId = ""
           return self
      }
      public var hasResolvedSemesters:Bool {
           get {
               return builderResult.hasResolvedSemesters
           }
      }
      public var resolvedSemesters:Common.ResolvedSemester! {
           get {
               if resolvedSemestersBuilder_ != nil {
                  builderResult.resolvedSemesters = resolvedSemestersBuilder_.getMessage()
               }
               return builderResult.resolvedSemesters
           }
           set (value) {
               builderResult.hasResolvedSemesters = true
               builderResult.resolvedSemesters = value
           }
      }
      private var resolvedSemestersBuilder_:Common.ResolvedSemester.Builder! {
           didSet {
              builderResult.hasResolvedSemesters = true
           }
      }
      public func getResolvedSemestersBuilder() -> Common.ResolvedSemester.Builder {
        if resolvedSemestersBuilder_ == nil {
           resolvedSemestersBuilder_ = Common.ResolvedSemester.Builder()
           builderResult.resolvedSemesters = resolvedSemestersBuilder_.getMessage()
           if resolvedSemesters != nil {
              try! resolvedSemestersBuilder_.mergeFrom(resolvedSemesters)
           }
        }
        return resolvedSemestersBuilder_
      }
      public func setResolvedSemesters(value:Common.ResolvedSemester!) -> Common.University.Builder {
        self.resolvedSemesters = value
        return self
      }
      public func mergeResolvedSemesters(value:Common.ResolvedSemester) throws -> Common.University.Builder {
        if builderResult.hasResolvedSemesters {
          builderResult.resolvedSemesters = try Common.ResolvedSemester.builderWithPrototype(builderResult.resolvedSemesters).mergeFrom(value).buildPartial()
        } else {
          builderResult.resolvedSemesters = value
        }
        builderResult.hasResolvedSemesters = true
        return self
      }
      public func clearResolvedSemesters() -> Common.University.Builder {
        resolvedSemestersBuilder_ = nil
        builderResult.hasResolvedSemesters = false
        builderResult.resolvedSemesters = nil
        return self
      }
      public var subjects:Array<Common.Subject> {
           get {
               return builderResult.subjects
           }
           set (value) {
               builderResult.subjects = value
           }
      }
      public func setSubjects(value:Array<Common.Subject>) -> Common.University.Builder {
        self.subjects = value
        return self
      }
      public func clearSubjects() -> Common.University.Builder {
        builderResult.subjects.removeAll(keepCapacity: false)
        return self
      }
      public var availableSemesters:Array<Common.Semester> {
           get {
               return builderResult.availableSemesters
           }
           set (value) {
               builderResult.availableSemesters = value
           }
      }
      public func setAvailableSemesters(value:Array<Common.Semester>) -> Common.University.Builder {
        self.availableSemesters = value
        return self
      }
      public func clearAvailableSemesters() -> Common.University.Builder {
        builderResult.availableSemesters.removeAll(keepCapacity: false)
        return self
      }
      public var registrations:Array<Common.Registration> {
           get {
               return builderResult.registrations
           }
           set (value) {
               builderResult.registrations = value
           }
      }
      public func setRegistrations(value:Array<Common.Registration>) -> Common.University.Builder {
        self.registrations = value
        return self
      }
      public func clearRegistrations() -> Common.University.Builder {
        builderResult.registrations.removeAll(keepCapacity: false)
        return self
      }
      public var metadata:Array<Common.Metadata> {
           get {
               return builderResult.metadata
           }
           set (value) {
               builderResult.metadata = value
           }
      }
      public func setMetadata(value:Array<Common.Metadata>) -> Common.University.Builder {
        self.metadata = value
        return self
      }
      public func clearMetadata() -> Common.University.Builder {
        builderResult.metadata.removeAll(keepCapacity: false)
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Common.University.Builder {
        builderResult = Common.University()
        return self
      }
      public override func clone() throws -> Common.University.Builder {
        return try Common.University.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Common.University {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Common.University {
        let returnMe:Common.University = builderResult
        return returnMe
      }
      public func mergeFrom(other:Common.University) throws -> Common.University.Builder {
        if other == Common.University() {
         return self
        }
        if other.hasId {
             id = other.id
        }
        if other.hasName {
             name = other.name
        }
        if other.hasAbbr {
             abbr = other.abbr
        }
        if other.hasHomePage {
             homePage = other.homePage
        }
        if other.hasRegistrationPage {
             registrationPage = other.registrationPage
        }
        if other.hasMainColor {
             mainColor = other.mainColor
        }
        if other.hasAccentColor {
             accentColor = other.accentColor
        }
        if other.hasTopicName {
             topicName = other.topicName
        }
        if other.hasTopicId {
             topicId = other.topicId
        }
        if (other.hasResolvedSemesters) {
            try mergeResolvedSemesters(other.resolvedSemesters)
        }
        if !other.subjects.isEmpty  {
           builderResult.subjects += other.subjects
        }
        if !other.availableSemesters.isEmpty  {
           builderResult.availableSemesters += other.availableSemesters
        }
        if !other.registrations.isEmpty  {
           builderResult.registrations += other.registrations
        }
        if !other.metadata.isEmpty  {
           builderResult.metadata += other.metadata
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Common.University.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Common.University.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            id = try input.readInt64()

          case 18 :
            name = try input.readString()

          case 26 :
            abbr = try input.readString()

          case 34 :
            homePage = try input.readString()

          case 42 :
            registrationPage = try input.readString()

          case 50 :
            mainColor = try input.readString()

          case 58 :
            accentColor = try input.readString()

          case 66 :
            topicName = try input.readString()

          case 74 :
            topicId = try input.readString()

          case 82 :
            let subBuilder:Common.ResolvedSemester.Builder = Common.ResolvedSemester.Builder()
            if hasResolvedSemesters {
              try subBuilder.mergeFrom(resolvedSemesters)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            resolvedSemesters = subBuilder.buildPartial()

          case 90 :
            let subBuilder = Common.Subject.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            subjects += [subBuilder.buildPartial()]

          case 98 :
            let subBuilder = Common.Semester.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            availableSemesters += [subBuilder.buildPartial()]

          case 106 :
            let subBuilder = Common.Registration.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            registrations += [subBuilder.buildPartial()]

          case 114 :
            let subBuilder = Common.Metadata.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            metadata += [subBuilder.buildPartial()]

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class Subject : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var id:Int64 = Int64(0)

    public private(set) var hasId:Bool = false
    public private(set) var universityId:Int64 = Int64(0)

    public private(set) var hasUniversityId:Bool = false
    public private(set) var name:String = ""

    public private(set) var hasName:Bool = false
    public private(set) var number:String = ""

    public private(set) var hasNumber:Bool = false
    public private(set) var season:String = ""

    public private(set) var hasSeason:Bool = false
    public private(set) var year:String = ""

    public private(set) var hasYear:Bool = false
    public private(set) var topicName:String = ""

    public private(set) var hasTopicName:Bool = false
    public private(set) var topicId:String = ""

    public private(set) var hasTopicId:Bool = false
    public private(set) var courses:Array<Common.Course>  = Array<Common.Course>()
    public private(set) var metadata:Array<Common.Metadata>  = Array<Common.Metadata>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasId {
        try output.writeInt64(1, value:id)
      }
      if hasUniversityId {
        try output.writeInt64(2, value:universityId)
      }
      if hasName {
        try output.writeString(3, value:name)
      }
      if hasNumber {
        try output.writeString(4, value:number)
      }
      if hasSeason {
        try output.writeString(5, value:season)
      }
      if hasYear {
        try output.writeString(6, value:year)
      }
      if hasTopicName {
        try output.writeString(7, value:topicName)
      }
      if hasTopicId {
        try output.writeString(8, value:topicId)
      }
      for oneElementcourses in courses {
          try output.writeMessage(9, value:oneElementcourses)
      }
      for oneElementmetadata in metadata {
          try output.writeMessage(10, value:oneElementmetadata)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasId {
        serialize_size += id.computeInt64Size(1)
      }
      if hasUniversityId {
        serialize_size += universityId.computeInt64Size(2)
      }
      if hasName {
        serialize_size += name.computeStringSize(3)
      }
      if hasNumber {
        serialize_size += number.computeStringSize(4)
      }
      if hasSeason {
        serialize_size += season.computeStringSize(5)
      }
      if hasYear {
        serialize_size += year.computeStringSize(6)
      }
      if hasTopicName {
        serialize_size += topicName.computeStringSize(7)
      }
      if hasTopicId {
        serialize_size += topicId.computeStringSize(8)
      }
      for oneElementcourses in courses {
          serialize_size += oneElementcourses.computeMessageSize(9)
      }
      for oneElementmetadata in metadata {
          serialize_size += oneElementmetadata.computeMessageSize(10)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Common.Subject> {
      var mergedArray = Array<Common.Subject>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Common.Subject? {
      return try Common.Subject.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Common.Subject {
      return try Common.Subject.Builder().mergeFromData(data, extensionRegistry:Common.ModelRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Common.Subject {
      return try Common.Subject.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Common.Subject {
      return try Common.Subject.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Common.Subject {
      return try Common.Subject.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Common.Subject {
      return try Common.Subject.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Common.Subject {
      return try Common.Subject.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Common.Subject.Builder {
      return Common.Subject.classBuilder() as! Common.Subject.Builder
    }
    public func getBuilder() -> Common.Subject.Builder {
      return classBuilder() as! Common.Subject.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Common.Subject.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Common.Subject.Builder()
    }
    public func toBuilder() throws -> Common.Subject.Builder {
      return try Common.Subject.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Common.Subject) throws -> Common.Subject.Builder {
      return try Common.Subject.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasUniversityId {
        output += "\(indent) universityId: \(universityId) \n"
      }
      if hasName {
        output += "\(indent) name: \(name) \n"
      }
      if hasNumber {
        output += "\(indent) number: \(number) \n"
      }
      if hasSeason {
        output += "\(indent) season: \(season) \n"
      }
      if hasYear {
        output += "\(indent) year: \(year) \n"
      }
      if hasTopicName {
        output += "\(indent) topicName: \(topicName) \n"
      }
      if hasTopicId {
        output += "\(indent) topicId: \(topicId) \n"
      }
      var coursesElementIndex:Int = 0
      for oneElementcourses in courses {
          output += "\(indent) courses[\(coursesElementIndex)] {\n"
          output += try oneElementcourses.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          coursesElementIndex += 1
      }
      var metadataElementIndex:Int = 0
      for oneElementmetadata in metadata {
          output += "\(indent) metadata[\(metadataElementIndex)] {\n"
          output += try oneElementmetadata.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          metadataElementIndex += 1
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasUniversityId {
               hashCode = (hashCode &* 31) &+ universityId.hashValue
            }
            if hasName {
               hashCode = (hashCode &* 31) &+ name.hashValue
            }
            if hasNumber {
               hashCode = (hashCode &* 31) &+ number.hashValue
            }
            if hasSeason {
               hashCode = (hashCode &* 31) &+ season.hashValue
            }
            if hasYear {
               hashCode = (hashCode &* 31) &+ year.hashValue
            }
            if hasTopicName {
               hashCode = (hashCode &* 31) &+ topicName.hashValue
            }
            if hasTopicId {
               hashCode = (hashCode &* 31) &+ topicId.hashValue
            }
            for oneElementcourses in courses {
                hashCode = (hashCode &* 31) &+ oneElementcourses.hashValue
            }
            for oneElementmetadata in metadata {
                hashCode = (hashCode &* 31) &+ oneElementmetadata.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Common.Subject"
    }
    override public func className() -> String {
        return "Common.Subject"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Common.Subject.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Common.Subject = Common.Subject()
      public func getMessage() -> Common.Subject {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasId:Bool {
           get {
                return builderResult.hasId
           }
      }
      public var id:Int64 {
           get {
                return builderResult.id
           }
           set (value) {
               builderResult.hasId = true
               builderResult.id = value
           }
      }
      public func setId(value:Int64) -> Common.Subject.Builder {
        self.id = value
        return self
      }
      public func clearId() -> Common.Subject.Builder{
           builderResult.hasId = false
           builderResult.id = Int64(0)
           return self
      }
      public var hasUniversityId:Bool {
           get {
                return builderResult.hasUniversityId
           }
      }
      public var universityId:Int64 {
           get {
                return builderResult.universityId
           }
           set (value) {
               builderResult.hasUniversityId = true
               builderResult.universityId = value
           }
      }
      public func setUniversityId(value:Int64) -> Common.Subject.Builder {
        self.universityId = value
        return self
      }
      public func clearUniversityId() -> Common.Subject.Builder{
           builderResult.hasUniversityId = false
           builderResult.universityId = Int64(0)
           return self
      }
      public var hasName:Bool {
           get {
                return builderResult.hasName
           }
      }
      public var name:String {
           get {
                return builderResult.name
           }
           set (value) {
               builderResult.hasName = true
               builderResult.name = value
           }
      }
      public func setName(value:String) -> Common.Subject.Builder {
        self.name = value
        return self
      }
      public func clearName() -> Common.Subject.Builder{
           builderResult.hasName = false
           builderResult.name = ""
           return self
      }
      public var hasNumber:Bool {
           get {
                return builderResult.hasNumber
           }
      }
      public var number:String {
           get {
                return builderResult.number
           }
           set (value) {
               builderResult.hasNumber = true
               builderResult.number = value
           }
      }
      public func setNumber(value:String) -> Common.Subject.Builder {
        self.number = value
        return self
      }
      public func clearNumber() -> Common.Subject.Builder{
           builderResult.hasNumber = false
           builderResult.number = ""
           return self
      }
      public var hasSeason:Bool {
           get {
                return builderResult.hasSeason
           }
      }
      public var season:String {
           get {
                return builderResult.season
           }
           set (value) {
               builderResult.hasSeason = true
               builderResult.season = value
           }
      }
      public func setSeason(value:String) -> Common.Subject.Builder {
        self.season = value
        return self
      }
      public func clearSeason() -> Common.Subject.Builder{
           builderResult.hasSeason = false
           builderResult.season = ""
           return self
      }
      public var hasYear:Bool {
           get {
                return builderResult.hasYear
           }
      }
      public var year:String {
           get {
                return builderResult.year
           }
           set (value) {
               builderResult.hasYear = true
               builderResult.year = value
           }
      }
      public func setYear(value:String) -> Common.Subject.Builder {
        self.year = value
        return self
      }
      public func clearYear() -> Common.Subject.Builder{
           builderResult.hasYear = false
           builderResult.year = ""
           return self
      }
      public var hasTopicName:Bool {
           get {
                return builderResult.hasTopicName
           }
      }
      public var topicName:String {
           get {
                return builderResult.topicName
           }
           set (value) {
               builderResult.hasTopicName = true
               builderResult.topicName = value
           }
      }
      public func setTopicName(value:String) -> Common.Subject.Builder {
        self.topicName = value
        return self
      }
      public func clearTopicName() -> Common.Subject.Builder{
           builderResult.hasTopicName = false
           builderResult.topicName = ""
           return self
      }
      public var hasTopicId:Bool {
           get {
                return builderResult.hasTopicId
           }
      }
      public var topicId:String {
           get {
                return builderResult.topicId
           }
           set (value) {
               builderResult.hasTopicId = true
               builderResult.topicId = value
           }
      }
      public func setTopicId(value:String) -> Common.Subject.Builder {
        self.topicId = value
        return self
      }
      public func clearTopicId() -> Common.Subject.Builder{
           builderResult.hasTopicId = false
           builderResult.topicId = ""
           return self
      }
      public var courses:Array<Common.Course> {
           get {
               return builderResult.courses
           }
           set (value) {
               builderResult.courses = value
           }
      }
      public func setCourses(value:Array<Common.Course>) -> Common.Subject.Builder {
        self.courses = value
        return self
      }
      public func clearCourses() -> Common.Subject.Builder {
        builderResult.courses.removeAll(keepCapacity: false)
        return self
      }
      public var metadata:Array<Common.Metadata> {
           get {
               return builderResult.metadata
           }
           set (value) {
               builderResult.metadata = value
           }
      }
      public func setMetadata(value:Array<Common.Metadata>) -> Common.Subject.Builder {
        self.metadata = value
        return self
      }
      public func clearMetadata() -> Common.Subject.Builder {
        builderResult.metadata.removeAll(keepCapacity: false)
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Common.Subject.Builder {
        builderResult = Common.Subject()
        return self
      }
      public override func clone() throws -> Common.Subject.Builder {
        return try Common.Subject.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Common.Subject {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Common.Subject {
        let returnMe:Common.Subject = builderResult
        return returnMe
      }
      public func mergeFrom(other:Common.Subject) throws -> Common.Subject.Builder {
        if other == Common.Subject() {
         return self
        }
        if other.hasId {
             id = other.id
        }
        if other.hasUniversityId {
             universityId = other.universityId
        }
        if other.hasName {
             name = other.name
        }
        if other.hasNumber {
             number = other.number
        }
        if other.hasSeason {
             season = other.season
        }
        if other.hasYear {
             year = other.year
        }
        if other.hasTopicName {
             topicName = other.topicName
        }
        if other.hasTopicId {
             topicId = other.topicId
        }
        if !other.courses.isEmpty  {
           builderResult.courses += other.courses
        }
        if !other.metadata.isEmpty  {
           builderResult.metadata += other.metadata
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Common.Subject.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Common.Subject.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            id = try input.readInt64()

          case 16 :
            universityId = try input.readInt64()

          case 26 :
            name = try input.readString()

          case 34 :
            number = try input.readString()

          case 42 :
            season = try input.readString()

          case 50 :
            year = try input.readString()

          case 58 :
            topicName = try input.readString()

          case 66 :
            topicId = try input.readString()

          case 74 :
            let subBuilder = Common.Course.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            courses += [subBuilder.buildPartial()]

          case 82 :
            let subBuilder = Common.Metadata.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            metadata += [subBuilder.buildPartial()]

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class Course : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var id:Int64 = Int64(0)

    public private(set) var hasId:Bool = false
    public private(set) var subjectId:Int64 = Int64(0)

    public private(set) var hasSubjectId:Bool = false
    public private(set) var name:String = ""

    public private(set) var hasName:Bool = false
    public private(set) var number:String = ""

    public private(set) var hasNumber:Bool = false
    public private(set) var synopsis:String = ""

    public private(set) var hasSynopsis:Bool = false
    public private(set) var topicName:String = ""

    public private(set) var hasTopicName:Bool = false
    public private(set) var topicId:String = ""

    public private(set) var hasTopicId:Bool = false
    public private(set) var sections:Array<Common.Section>  = Array<Common.Section>()
    public private(set) var metadata:Array<Common.Metadata>  = Array<Common.Metadata>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasId {
        try output.writeInt64(1, value:id)
      }
      if hasSubjectId {
        try output.writeInt64(2, value:subjectId)
      }
      if hasName {
        try output.writeString(3, value:name)
      }
      if hasNumber {
        try output.writeString(4, value:number)
      }
      if hasSynopsis {
        try output.writeString(5, value:synopsis)
      }
      if hasTopicName {
        try output.writeString(6, value:topicName)
      }
      if hasTopicId {
        try output.writeString(7, value:topicId)
      }
      for oneElementsections in sections {
          try output.writeMessage(8, value:oneElementsections)
      }
      for oneElementmetadata in metadata {
          try output.writeMessage(9, value:oneElementmetadata)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasId {
        serialize_size += id.computeInt64Size(1)
      }
      if hasSubjectId {
        serialize_size += subjectId.computeInt64Size(2)
      }
      if hasName {
        serialize_size += name.computeStringSize(3)
      }
      if hasNumber {
        serialize_size += number.computeStringSize(4)
      }
      if hasSynopsis {
        serialize_size += synopsis.computeStringSize(5)
      }
      if hasTopicName {
        serialize_size += topicName.computeStringSize(6)
      }
      if hasTopicId {
        serialize_size += topicId.computeStringSize(7)
      }
      for oneElementsections in sections {
          serialize_size += oneElementsections.computeMessageSize(8)
      }
      for oneElementmetadata in metadata {
          serialize_size += oneElementmetadata.computeMessageSize(9)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Common.Course> {
      var mergedArray = Array<Common.Course>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Common.Course? {
      return try Common.Course.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Common.Course {
      return try Common.Course.Builder().mergeFromData(data, extensionRegistry:Common.ModelRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Common.Course {
      return try Common.Course.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Common.Course {
      return try Common.Course.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Common.Course {
      return try Common.Course.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Common.Course {
      return try Common.Course.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Common.Course {
      return try Common.Course.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Common.Course.Builder {
      return Common.Course.classBuilder() as! Common.Course.Builder
    }
    public func getBuilder() -> Common.Course.Builder {
      return classBuilder() as! Common.Course.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Common.Course.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Common.Course.Builder()
    }
    public func toBuilder() throws -> Common.Course.Builder {
      return try Common.Course.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Common.Course) throws -> Common.Course.Builder {
      return try Common.Course.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasSubjectId {
        output += "\(indent) subjectId: \(subjectId) \n"
      }
      if hasName {
        output += "\(indent) name: \(name) \n"
      }
      if hasNumber {
        output += "\(indent) number: \(number) \n"
      }
      if hasSynopsis {
        output += "\(indent) synopsis: \(synopsis) \n"
      }
      if hasTopicName {
        output += "\(indent) topicName: \(topicName) \n"
      }
      if hasTopicId {
        output += "\(indent) topicId: \(topicId) \n"
      }
      var sectionsElementIndex:Int = 0
      for oneElementsections in sections {
          output += "\(indent) sections[\(sectionsElementIndex)] {\n"
          output += try oneElementsections.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          sectionsElementIndex += 1
      }
      var metadataElementIndex:Int = 0
      for oneElementmetadata in metadata {
          output += "\(indent) metadata[\(metadataElementIndex)] {\n"
          output += try oneElementmetadata.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          metadataElementIndex += 1
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasSubjectId {
               hashCode = (hashCode &* 31) &+ subjectId.hashValue
            }
            if hasName {
               hashCode = (hashCode &* 31) &+ name.hashValue
            }
            if hasNumber {
               hashCode = (hashCode &* 31) &+ number.hashValue
            }
            if hasSynopsis {
               hashCode = (hashCode &* 31) &+ synopsis.hashValue
            }
            if hasTopicName {
               hashCode = (hashCode &* 31) &+ topicName.hashValue
            }
            if hasTopicId {
               hashCode = (hashCode &* 31) &+ topicId.hashValue
            }
            for oneElementsections in sections {
                hashCode = (hashCode &* 31) &+ oneElementsections.hashValue
            }
            for oneElementmetadata in metadata {
                hashCode = (hashCode &* 31) &+ oneElementmetadata.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Common.Course"
    }
    override public func className() -> String {
        return "Common.Course"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Common.Course.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Common.Course = Common.Course()
      public func getMessage() -> Common.Course {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasId:Bool {
           get {
                return builderResult.hasId
           }
      }
      public var id:Int64 {
           get {
                return builderResult.id
           }
           set (value) {
               builderResult.hasId = true
               builderResult.id = value
           }
      }
      public func setId(value:Int64) -> Common.Course.Builder {
        self.id = value
        return self
      }
      public func clearId() -> Common.Course.Builder{
           builderResult.hasId = false
           builderResult.id = Int64(0)
           return self
      }
      public var hasSubjectId:Bool {
           get {
                return builderResult.hasSubjectId
           }
      }
      public var subjectId:Int64 {
           get {
                return builderResult.subjectId
           }
           set (value) {
               builderResult.hasSubjectId = true
               builderResult.subjectId = value
           }
      }
      public func setSubjectId(value:Int64) -> Common.Course.Builder {
        self.subjectId = value
        return self
      }
      public func clearSubjectId() -> Common.Course.Builder{
           builderResult.hasSubjectId = false
           builderResult.subjectId = Int64(0)
           return self
      }
      public var hasName:Bool {
           get {
                return builderResult.hasName
           }
      }
      public var name:String {
           get {
                return builderResult.name
           }
           set (value) {
               builderResult.hasName = true
               builderResult.name = value
           }
      }
      public func setName(value:String) -> Common.Course.Builder {
        self.name = value
        return self
      }
      public func clearName() -> Common.Course.Builder{
           builderResult.hasName = false
           builderResult.name = ""
           return self
      }
      public var hasNumber:Bool {
           get {
                return builderResult.hasNumber
           }
      }
      public var number:String {
           get {
                return builderResult.number
           }
           set (value) {
               builderResult.hasNumber = true
               builderResult.number = value
           }
      }
      public func setNumber(value:String) -> Common.Course.Builder {
        self.number = value
        return self
      }
      public func clearNumber() -> Common.Course.Builder{
           builderResult.hasNumber = false
           builderResult.number = ""
           return self
      }
      public var hasSynopsis:Bool {
           get {
                return builderResult.hasSynopsis
           }
      }
      public var synopsis:String {
           get {
                return builderResult.synopsis
           }
           set (value) {
               builderResult.hasSynopsis = true
               builderResult.synopsis = value
           }
      }
      public func setSynopsis(value:String) -> Common.Course.Builder {
        self.synopsis = value
        return self
      }
      public func clearSynopsis() -> Common.Course.Builder{
           builderResult.hasSynopsis = false
           builderResult.synopsis = ""
           return self
      }
      public var hasTopicName:Bool {
           get {
                return builderResult.hasTopicName
           }
      }
      public var topicName:String {
           get {
                return builderResult.topicName
           }
           set (value) {
               builderResult.hasTopicName = true
               builderResult.topicName = value
           }
      }
      public func setTopicName(value:String) -> Common.Course.Builder {
        self.topicName = value
        return self
      }
      public func clearTopicName() -> Common.Course.Builder{
           builderResult.hasTopicName = false
           builderResult.topicName = ""
           return self
      }
      public var hasTopicId:Bool {
           get {
                return builderResult.hasTopicId
           }
      }
      public var topicId:String {
           get {
                return builderResult.topicId
           }
           set (value) {
               builderResult.hasTopicId = true
               builderResult.topicId = value
           }
      }
      public func setTopicId(value:String) -> Common.Course.Builder {
        self.topicId = value
        return self
      }
      public func clearTopicId() -> Common.Course.Builder{
           builderResult.hasTopicId = false
           builderResult.topicId = ""
           return self
      }
      public var sections:Array<Common.Section> {
           get {
               return builderResult.sections
           }
           set (value) {
               builderResult.sections = value
           }
      }
      public func setSections(value:Array<Common.Section>) -> Common.Course.Builder {
        self.sections = value
        return self
      }
      public func clearSections() -> Common.Course.Builder {
        builderResult.sections.removeAll(keepCapacity: false)
        return self
      }
      public var metadata:Array<Common.Metadata> {
           get {
               return builderResult.metadata
           }
           set (value) {
               builderResult.metadata = value
           }
      }
      public func setMetadata(value:Array<Common.Metadata>) -> Common.Course.Builder {
        self.metadata = value
        return self
      }
      public func clearMetadata() -> Common.Course.Builder {
        builderResult.metadata.removeAll(keepCapacity: false)
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Common.Course.Builder {
        builderResult = Common.Course()
        return self
      }
      public override func clone() throws -> Common.Course.Builder {
        return try Common.Course.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Common.Course {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Common.Course {
        let returnMe:Common.Course = builderResult
        return returnMe
      }
      public func mergeFrom(other:Common.Course) throws -> Common.Course.Builder {
        if other == Common.Course() {
         return self
        }
        if other.hasId {
             id = other.id
        }
        if other.hasSubjectId {
             subjectId = other.subjectId
        }
        if other.hasName {
             name = other.name
        }
        if other.hasNumber {
             number = other.number
        }
        if other.hasSynopsis {
             synopsis = other.synopsis
        }
        if other.hasTopicName {
             topicName = other.topicName
        }
        if other.hasTopicId {
             topicId = other.topicId
        }
        if !other.sections.isEmpty  {
           builderResult.sections += other.sections
        }
        if !other.metadata.isEmpty  {
           builderResult.metadata += other.metadata
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Common.Course.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Common.Course.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            id = try input.readInt64()

          case 16 :
            subjectId = try input.readInt64()

          case 26 :
            name = try input.readString()

          case 34 :
            number = try input.readString()

          case 42 :
            synopsis = try input.readString()

          case 50 :
            topicName = try input.readString()

          case 58 :
            topicId = try input.readString()

          case 66 :
            let subBuilder = Common.Section.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            sections += [subBuilder.buildPartial()]

          case 74 :
            let subBuilder = Common.Metadata.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            metadata += [subBuilder.buildPartial()]

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class Section : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var id:Int64 = Int64(0)

    public private(set) var hasId:Bool = false
    public private(set) var courseId:Int64 = Int64(0)

    public private(set) var hasCourseId:Bool = false
    public private(set) var number:String = ""

    public private(set) var hasNumber:Bool = false
    public private(set) var callNumber:String = ""

    public private(set) var hasCallNumber:Bool = false
    public private(set) var max:Int64 = Int64(0)

    public private(set) var hasMax:Bool = false
    public private(set) var now:Int64 = Int64(0)

    public private(set) var hasNow:Bool = false
    public private(set) var status:String = ""

    public private(set) var hasStatus:Bool = false
    public private(set) var credits:String = ""

    public private(set) var hasCredits:Bool = false
    public private(set) var topicName:String = ""

    public private(set) var hasTopicName:Bool = false
    public private(set) var topicId:String = ""

    public private(set) var hasTopicId:Bool = false
    public private(set) var meetings:Array<Common.Meeting>  = Array<Common.Meeting>()
    public private(set) var instructors:Array<Common.Instructor>  = Array<Common.Instructor>()
    public private(set) var books:Array<Common.Book>  = Array<Common.Book>()
    public private(set) var metadata:Array<Common.Metadata>  = Array<Common.Metadata>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasId {
        try output.writeInt64(1, value:id)
      }
      if hasCourseId {
        try output.writeInt64(2, value:courseId)
      }
      if hasNumber {
        try output.writeString(3, value:number)
      }
      if hasCallNumber {
        try output.writeString(4, value:callNumber)
      }
      if hasMax {
        try output.writeInt64(5, value:max)
      }
      if hasNow {
        try output.writeInt64(6, value:now)
      }
      if hasStatus {
        try output.writeString(7, value:status)
      }
      if hasCredits {
        try output.writeString(8, value:credits)
      }
      if hasTopicName {
        try output.writeString(9, value:topicName)
      }
      if hasTopicId {
        try output.writeString(10, value:topicId)
      }
      for oneElementmeetings in meetings {
          try output.writeMessage(11, value:oneElementmeetings)
      }
      for oneElementinstructors in instructors {
          try output.writeMessage(12, value:oneElementinstructors)
      }
      for oneElementbooks in books {
          try output.writeMessage(13, value:oneElementbooks)
      }
      for oneElementmetadata in metadata {
          try output.writeMessage(14, value:oneElementmetadata)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasId {
        serialize_size += id.computeInt64Size(1)
      }
      if hasCourseId {
        serialize_size += courseId.computeInt64Size(2)
      }
      if hasNumber {
        serialize_size += number.computeStringSize(3)
      }
      if hasCallNumber {
        serialize_size += callNumber.computeStringSize(4)
      }
      if hasMax {
        serialize_size += max.computeInt64Size(5)
      }
      if hasNow {
        serialize_size += now.computeInt64Size(6)
      }
      if hasStatus {
        serialize_size += status.computeStringSize(7)
      }
      if hasCredits {
        serialize_size += credits.computeStringSize(8)
      }
      if hasTopicName {
        serialize_size += topicName.computeStringSize(9)
      }
      if hasTopicId {
        serialize_size += topicId.computeStringSize(10)
      }
      for oneElementmeetings in meetings {
          serialize_size += oneElementmeetings.computeMessageSize(11)
      }
      for oneElementinstructors in instructors {
          serialize_size += oneElementinstructors.computeMessageSize(12)
      }
      for oneElementbooks in books {
          serialize_size += oneElementbooks.computeMessageSize(13)
      }
      for oneElementmetadata in metadata {
          serialize_size += oneElementmetadata.computeMessageSize(14)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Common.Section> {
      var mergedArray = Array<Common.Section>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Common.Section? {
      return try Common.Section.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Common.Section {
      return try Common.Section.Builder().mergeFromData(data, extensionRegistry:Common.ModelRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Common.Section {
      return try Common.Section.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Common.Section {
      return try Common.Section.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Common.Section {
      return try Common.Section.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Common.Section {
      return try Common.Section.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Common.Section {
      return try Common.Section.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Common.Section.Builder {
      return Common.Section.classBuilder() as! Common.Section.Builder
    }
    public func getBuilder() -> Common.Section.Builder {
      return classBuilder() as! Common.Section.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Common.Section.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Common.Section.Builder()
    }
    public func toBuilder() throws -> Common.Section.Builder {
      return try Common.Section.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Common.Section) throws -> Common.Section.Builder {
      return try Common.Section.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasCourseId {
        output += "\(indent) courseId: \(courseId) \n"
      }
      if hasNumber {
        output += "\(indent) number: \(number) \n"
      }
      if hasCallNumber {
        output += "\(indent) callNumber: \(callNumber) \n"
      }
      if hasMax {
        output += "\(indent) max: \(max) \n"
      }
      if hasNow {
        output += "\(indent) now: \(now) \n"
      }
      if hasStatus {
        output += "\(indent) status: \(status) \n"
      }
      if hasCredits {
        output += "\(indent) credits: \(credits) \n"
      }
      if hasTopicName {
        output += "\(indent) topicName: \(topicName) \n"
      }
      if hasTopicId {
        output += "\(indent) topicId: \(topicId) \n"
      }
      var meetingsElementIndex:Int = 0
      for oneElementmeetings in meetings {
          output += "\(indent) meetings[\(meetingsElementIndex)] {\n"
          output += try oneElementmeetings.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          meetingsElementIndex += 1
      }
      var instructorsElementIndex:Int = 0
      for oneElementinstructors in instructors {
          output += "\(indent) instructors[\(instructorsElementIndex)] {\n"
          output += try oneElementinstructors.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          instructorsElementIndex += 1
      }
      var booksElementIndex:Int = 0
      for oneElementbooks in books {
          output += "\(indent) books[\(booksElementIndex)] {\n"
          output += try oneElementbooks.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          booksElementIndex += 1
      }
      var metadataElementIndex:Int = 0
      for oneElementmetadata in metadata {
          output += "\(indent) metadata[\(metadataElementIndex)] {\n"
          output += try oneElementmetadata.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          metadataElementIndex += 1
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasCourseId {
               hashCode = (hashCode &* 31) &+ courseId.hashValue
            }
            if hasNumber {
               hashCode = (hashCode &* 31) &+ number.hashValue
            }
            if hasCallNumber {
               hashCode = (hashCode &* 31) &+ callNumber.hashValue
            }
            if hasMax {
               hashCode = (hashCode &* 31) &+ max.hashValue
            }
            if hasNow {
               hashCode = (hashCode &* 31) &+ now.hashValue
            }
            if hasStatus {
               hashCode = (hashCode &* 31) &+ status.hashValue
            }
            if hasCredits {
               hashCode = (hashCode &* 31) &+ credits.hashValue
            }
            if hasTopicName {
               hashCode = (hashCode &* 31) &+ topicName.hashValue
            }
            if hasTopicId {
               hashCode = (hashCode &* 31) &+ topicId.hashValue
            }
            for oneElementmeetings in meetings {
                hashCode = (hashCode &* 31) &+ oneElementmeetings.hashValue
            }
            for oneElementinstructors in instructors {
                hashCode = (hashCode &* 31) &+ oneElementinstructors.hashValue
            }
            for oneElementbooks in books {
                hashCode = (hashCode &* 31) &+ oneElementbooks.hashValue
            }
            for oneElementmetadata in metadata {
                hashCode = (hashCode &* 31) &+ oneElementmetadata.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Common.Section"
    }
    override public func className() -> String {
        return "Common.Section"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Common.Section.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Common.Section = Common.Section()
      public func getMessage() -> Common.Section {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasId:Bool {
           get {
                return builderResult.hasId
           }
      }
      public var id:Int64 {
           get {
                return builderResult.id
           }
           set (value) {
               builderResult.hasId = true
               builderResult.id = value
           }
      }
      public func setId(value:Int64) -> Common.Section.Builder {
        self.id = value
        return self
      }
      public func clearId() -> Common.Section.Builder{
           builderResult.hasId = false
           builderResult.id = Int64(0)
           return self
      }
      public var hasCourseId:Bool {
           get {
                return builderResult.hasCourseId
           }
      }
      public var courseId:Int64 {
           get {
                return builderResult.courseId
           }
           set (value) {
               builderResult.hasCourseId = true
               builderResult.courseId = value
           }
      }
      public func setCourseId(value:Int64) -> Common.Section.Builder {
        self.courseId = value
        return self
      }
      public func clearCourseId() -> Common.Section.Builder{
           builderResult.hasCourseId = false
           builderResult.courseId = Int64(0)
           return self
      }
      public var hasNumber:Bool {
           get {
                return builderResult.hasNumber
           }
      }
      public var number:String {
           get {
                return builderResult.number
           }
           set (value) {
               builderResult.hasNumber = true
               builderResult.number = value
           }
      }
      public func setNumber(value:String) -> Common.Section.Builder {
        self.number = value
        return self
      }
      public func clearNumber() -> Common.Section.Builder{
           builderResult.hasNumber = false
           builderResult.number = ""
           return self
      }
      public var hasCallNumber:Bool {
           get {
                return builderResult.hasCallNumber
           }
      }
      public var callNumber:String {
           get {
                return builderResult.callNumber
           }
           set (value) {
               builderResult.hasCallNumber = true
               builderResult.callNumber = value
           }
      }
      public func setCallNumber(value:String) -> Common.Section.Builder {
        self.callNumber = value
        return self
      }
      public func clearCallNumber() -> Common.Section.Builder{
           builderResult.hasCallNumber = false
           builderResult.callNumber = ""
           return self
      }
      public var hasMax:Bool {
           get {
                return builderResult.hasMax
           }
      }
      public var max:Int64 {
           get {
                return builderResult.max
           }
           set (value) {
               builderResult.hasMax = true
               builderResult.max = value
           }
      }
      public func setMax(value:Int64) -> Common.Section.Builder {
        self.max = value
        return self
      }
      public func clearMax() -> Common.Section.Builder{
           builderResult.hasMax = false
           builderResult.max = Int64(0)
           return self
      }
      public var hasNow:Bool {
           get {
                return builderResult.hasNow
           }
      }
      public var now:Int64 {
           get {
                return builderResult.now
           }
           set (value) {
               builderResult.hasNow = true
               builderResult.now = value
           }
      }
      public func setNow(value:Int64) -> Common.Section.Builder {
        self.now = value
        return self
      }
      public func clearNow() -> Common.Section.Builder{
           builderResult.hasNow = false
           builderResult.now = Int64(0)
           return self
      }
      public var hasStatus:Bool {
           get {
                return builderResult.hasStatus
           }
      }
      public var status:String {
           get {
                return builderResult.status
           }
           set (value) {
               builderResult.hasStatus = true
               builderResult.status = value
           }
      }
      public func setStatus(value:String) -> Common.Section.Builder {
        self.status = value
        return self
      }
      public func clearStatus() -> Common.Section.Builder{
           builderResult.hasStatus = false
           builderResult.status = ""
           return self
      }
      public var hasCredits:Bool {
           get {
                return builderResult.hasCredits
           }
      }
      public var credits:String {
           get {
                return builderResult.credits
           }
           set (value) {
               builderResult.hasCredits = true
               builderResult.credits = value
           }
      }
      public func setCredits(value:String) -> Common.Section.Builder {
        self.credits = value
        return self
      }
      public func clearCredits() -> Common.Section.Builder{
           builderResult.hasCredits = false
           builderResult.credits = ""
           return self
      }
      public var hasTopicName:Bool {
           get {
                return builderResult.hasTopicName
           }
      }
      public var topicName:String {
           get {
                return builderResult.topicName
           }
           set (value) {
               builderResult.hasTopicName = true
               builderResult.topicName = value
           }
      }
      public func setTopicName(value:String) -> Common.Section.Builder {
        self.topicName = value
        return self
      }
      public func clearTopicName() -> Common.Section.Builder{
           builderResult.hasTopicName = false
           builderResult.topicName = ""
           return self
      }
      public var hasTopicId:Bool {
           get {
                return builderResult.hasTopicId
           }
      }
      public var topicId:String {
           get {
                return builderResult.topicId
           }
           set (value) {
               builderResult.hasTopicId = true
               builderResult.topicId = value
           }
      }
      public func setTopicId(value:String) -> Common.Section.Builder {
        self.topicId = value
        return self
      }
      public func clearTopicId() -> Common.Section.Builder{
           builderResult.hasTopicId = false
           builderResult.topicId = ""
           return self
      }
      public var meetings:Array<Common.Meeting> {
           get {
               return builderResult.meetings
           }
           set (value) {
               builderResult.meetings = value
           }
      }
      public func setMeetings(value:Array<Common.Meeting>) -> Common.Section.Builder {
        self.meetings = value
        return self
      }
      public func clearMeetings() -> Common.Section.Builder {
        builderResult.meetings.removeAll(keepCapacity: false)
        return self
      }
      public var instructors:Array<Common.Instructor> {
           get {
               return builderResult.instructors
           }
           set (value) {
               builderResult.instructors = value
           }
      }
      public func setInstructors(value:Array<Common.Instructor>) -> Common.Section.Builder {
        self.instructors = value
        return self
      }
      public func clearInstructors() -> Common.Section.Builder {
        builderResult.instructors.removeAll(keepCapacity: false)
        return self
      }
      public var books:Array<Common.Book> {
           get {
               return builderResult.books
           }
           set (value) {
               builderResult.books = value
           }
      }
      public func setBooks(value:Array<Common.Book>) -> Common.Section.Builder {
        self.books = value
        return self
      }
      public func clearBooks() -> Common.Section.Builder {
        builderResult.books.removeAll(keepCapacity: false)
        return self
      }
      public var metadata:Array<Common.Metadata> {
           get {
               return builderResult.metadata
           }
           set (value) {
               builderResult.metadata = value
           }
      }
      public func setMetadata(value:Array<Common.Metadata>) -> Common.Section.Builder {
        self.metadata = value
        return self
      }
      public func clearMetadata() -> Common.Section.Builder {
        builderResult.metadata.removeAll(keepCapacity: false)
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Common.Section.Builder {
        builderResult = Common.Section()
        return self
      }
      public override func clone() throws -> Common.Section.Builder {
        return try Common.Section.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Common.Section {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Common.Section {
        let returnMe:Common.Section = builderResult
        return returnMe
      }
      public func mergeFrom(other:Common.Section) throws -> Common.Section.Builder {
        if other == Common.Section() {
         return self
        }
        if other.hasId {
             id = other.id
        }
        if other.hasCourseId {
             courseId = other.courseId
        }
        if other.hasNumber {
             number = other.number
        }
        if other.hasCallNumber {
             callNumber = other.callNumber
        }
        if other.hasMax {
             max = other.max
        }
        if other.hasNow {
             now = other.now
        }
        if other.hasStatus {
             status = other.status
        }
        if other.hasCredits {
             credits = other.credits
        }
        if other.hasTopicName {
             topicName = other.topicName
        }
        if other.hasTopicId {
             topicId = other.topicId
        }
        if !other.meetings.isEmpty  {
           builderResult.meetings += other.meetings
        }
        if !other.instructors.isEmpty  {
           builderResult.instructors += other.instructors
        }
        if !other.books.isEmpty  {
           builderResult.books += other.books
        }
        if !other.metadata.isEmpty  {
           builderResult.metadata += other.metadata
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Common.Section.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Common.Section.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            id = try input.readInt64()

          case 16 :
            courseId = try input.readInt64()

          case 26 :
            number = try input.readString()

          case 34 :
            callNumber = try input.readString()

          case 40 :
            max = try input.readInt64()

          case 48 :
            now = try input.readInt64()

          case 58 :
            status = try input.readString()

          case 66 :
            credits = try input.readString()

          case 74 :
            topicName = try input.readString()

          case 82 :
            topicId = try input.readString()

          case 90 :
            let subBuilder = Common.Meeting.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            meetings += [subBuilder.buildPartial()]

          case 98 :
            let subBuilder = Common.Instructor.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            instructors += [subBuilder.buildPartial()]

          case 106 :
            let subBuilder = Common.Book.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            books += [subBuilder.buildPartial()]

          case 114 :
            let subBuilder = Common.Metadata.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            metadata += [subBuilder.buildPartial()]

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class Meeting : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var id:Int64 = Int64(0)

    public private(set) var hasId:Bool = false
    public private(set) var sectionId:Int64 = Int64(0)

    public private(set) var hasSectionId:Bool = false
    public private(set) var room:String = ""

    public private(set) var hasRoom:Bool = false
    public private(set) var day:String = ""

    public private(set) var hasDay:Bool = false
    public private(set) var startTime:String = ""

    public private(set) var hasStartTime:Bool = false
    public private(set) var endTime:String = ""

    public private(set) var hasEndTime:Bool = false
    public private(set) var classType:String = ""

    public private(set) var hasClassType:Bool = false
    public private(set) var index:Int32 = Int32(0)

    public private(set) var hasIndex:Bool = false
    public private(set) var metadata:Array<Common.Metadata>  = Array<Common.Metadata>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasId {
        try output.writeInt64(1, value:id)
      }
      if hasSectionId {
        try output.writeInt64(2, value:sectionId)
      }
      if hasRoom {
        try output.writeString(3, value:room)
      }
      if hasDay {
        try output.writeString(4, value:day)
      }
      if hasStartTime {
        try output.writeString(5, value:startTime)
      }
      if hasEndTime {
        try output.writeString(6, value:endTime)
      }
      if hasClassType {
        try output.writeString(7, value:classType)
      }
      if hasIndex {
        try output.writeInt32(8, value:index)
      }
      for oneElementmetadata in metadata {
          try output.writeMessage(9, value:oneElementmetadata)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasId {
        serialize_size += id.computeInt64Size(1)
      }
      if hasSectionId {
        serialize_size += sectionId.computeInt64Size(2)
      }
      if hasRoom {
        serialize_size += room.computeStringSize(3)
      }
      if hasDay {
        serialize_size += day.computeStringSize(4)
      }
      if hasStartTime {
        serialize_size += startTime.computeStringSize(5)
      }
      if hasEndTime {
        serialize_size += endTime.computeStringSize(6)
      }
      if hasClassType {
        serialize_size += classType.computeStringSize(7)
      }
      if hasIndex {
        serialize_size += index.computeInt32Size(8)
      }
      for oneElementmetadata in metadata {
          serialize_size += oneElementmetadata.computeMessageSize(9)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Common.Meeting> {
      var mergedArray = Array<Common.Meeting>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Common.Meeting? {
      return try Common.Meeting.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Common.Meeting {
      return try Common.Meeting.Builder().mergeFromData(data, extensionRegistry:Common.ModelRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Common.Meeting {
      return try Common.Meeting.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Common.Meeting {
      return try Common.Meeting.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Common.Meeting {
      return try Common.Meeting.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Common.Meeting {
      return try Common.Meeting.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Common.Meeting {
      return try Common.Meeting.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Common.Meeting.Builder {
      return Common.Meeting.classBuilder() as! Common.Meeting.Builder
    }
    public func getBuilder() -> Common.Meeting.Builder {
      return classBuilder() as! Common.Meeting.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Common.Meeting.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Common.Meeting.Builder()
    }
    public func toBuilder() throws -> Common.Meeting.Builder {
      return try Common.Meeting.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Common.Meeting) throws -> Common.Meeting.Builder {
      return try Common.Meeting.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasSectionId {
        output += "\(indent) sectionId: \(sectionId) \n"
      }
      if hasRoom {
        output += "\(indent) room: \(room) \n"
      }
      if hasDay {
        output += "\(indent) day: \(day) \n"
      }
      if hasStartTime {
        output += "\(indent) startTime: \(startTime) \n"
      }
      if hasEndTime {
        output += "\(indent) endTime: \(endTime) \n"
      }
      if hasClassType {
        output += "\(indent) classType: \(classType) \n"
      }
      if hasIndex {
        output += "\(indent) index: \(index) \n"
      }
      var metadataElementIndex:Int = 0
      for oneElementmetadata in metadata {
          output += "\(indent) metadata[\(metadataElementIndex)] {\n"
          output += try oneElementmetadata.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          metadataElementIndex += 1
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasSectionId {
               hashCode = (hashCode &* 31) &+ sectionId.hashValue
            }
            if hasRoom {
               hashCode = (hashCode &* 31) &+ room.hashValue
            }
            if hasDay {
               hashCode = (hashCode &* 31) &+ day.hashValue
            }
            if hasStartTime {
               hashCode = (hashCode &* 31) &+ startTime.hashValue
            }
            if hasEndTime {
               hashCode = (hashCode &* 31) &+ endTime.hashValue
            }
            if hasClassType {
               hashCode = (hashCode &* 31) &+ classType.hashValue
            }
            if hasIndex {
               hashCode = (hashCode &* 31) &+ index.hashValue
            }
            for oneElementmetadata in metadata {
                hashCode = (hashCode &* 31) &+ oneElementmetadata.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Common.Meeting"
    }
    override public func className() -> String {
        return "Common.Meeting"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Common.Meeting.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Common.Meeting = Common.Meeting()
      public func getMessage() -> Common.Meeting {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasId:Bool {
           get {
                return builderResult.hasId
           }
      }
      public var id:Int64 {
           get {
                return builderResult.id
           }
           set (value) {
               builderResult.hasId = true
               builderResult.id = value
           }
      }
      public func setId(value:Int64) -> Common.Meeting.Builder {
        self.id = value
        return self
      }
      public func clearId() -> Common.Meeting.Builder{
           builderResult.hasId = false
           builderResult.id = Int64(0)
           return self
      }
      public var hasSectionId:Bool {
           get {
                return builderResult.hasSectionId
           }
      }
      public var sectionId:Int64 {
           get {
                return builderResult.sectionId
           }
           set (value) {
               builderResult.hasSectionId = true
               builderResult.sectionId = value
           }
      }
      public func setSectionId(value:Int64) -> Common.Meeting.Builder {
        self.sectionId = value
        return self
      }
      public func clearSectionId() -> Common.Meeting.Builder{
           builderResult.hasSectionId = false
           builderResult.sectionId = Int64(0)
           return self
      }
      public var hasRoom:Bool {
           get {
                return builderResult.hasRoom
           }
      }
      public var room:String {
           get {
                return builderResult.room
           }
           set (value) {
               builderResult.hasRoom = true
               builderResult.room = value
           }
      }
      public func setRoom(value:String) -> Common.Meeting.Builder {
        self.room = value
        return self
      }
      public func clearRoom() -> Common.Meeting.Builder{
           builderResult.hasRoom = false
           builderResult.room = ""
           return self
      }
      public var hasDay:Bool {
           get {
                return builderResult.hasDay
           }
      }
      public var day:String {
           get {
                return builderResult.day
           }
           set (value) {
               builderResult.hasDay = true
               builderResult.day = value
           }
      }
      public func setDay(value:String) -> Common.Meeting.Builder {
        self.day = value
        return self
      }
      public func clearDay() -> Common.Meeting.Builder{
           builderResult.hasDay = false
           builderResult.day = ""
           return self
      }
      public var hasStartTime:Bool {
           get {
                return builderResult.hasStartTime
           }
      }
      public var startTime:String {
           get {
                return builderResult.startTime
           }
           set (value) {
               builderResult.hasStartTime = true
               builderResult.startTime = value
           }
      }
      public func setStartTime(value:String) -> Common.Meeting.Builder {
        self.startTime = value
        return self
      }
      public func clearStartTime() -> Common.Meeting.Builder{
           builderResult.hasStartTime = false
           builderResult.startTime = ""
           return self
      }
      public var hasEndTime:Bool {
           get {
                return builderResult.hasEndTime
           }
      }
      public var endTime:String {
           get {
                return builderResult.endTime
           }
           set (value) {
               builderResult.hasEndTime = true
               builderResult.endTime = value
           }
      }
      public func setEndTime(value:String) -> Common.Meeting.Builder {
        self.endTime = value
        return self
      }
      public func clearEndTime() -> Common.Meeting.Builder{
           builderResult.hasEndTime = false
           builderResult.endTime = ""
           return self
      }
      public var hasClassType:Bool {
           get {
                return builderResult.hasClassType
           }
      }
      public var classType:String {
           get {
                return builderResult.classType
           }
           set (value) {
               builderResult.hasClassType = true
               builderResult.classType = value
           }
      }
      public func setClassType(value:String) -> Common.Meeting.Builder {
        self.classType = value
        return self
      }
      public func clearClassType() -> Common.Meeting.Builder{
           builderResult.hasClassType = false
           builderResult.classType = ""
           return self
      }
      public var hasIndex:Bool {
           get {
                return builderResult.hasIndex
           }
      }
      public var index:Int32 {
           get {
                return builderResult.index
           }
           set (value) {
               builderResult.hasIndex = true
               builderResult.index = value
           }
      }
      public func setIndex(value:Int32) -> Common.Meeting.Builder {
        self.index = value
        return self
      }
      public func clearIndex() -> Common.Meeting.Builder{
           builderResult.hasIndex = false
           builderResult.index = Int32(0)
           return self
      }
      public var metadata:Array<Common.Metadata> {
           get {
               return builderResult.metadata
           }
           set (value) {
               builderResult.metadata = value
           }
      }
      public func setMetadata(value:Array<Common.Metadata>) -> Common.Meeting.Builder {
        self.metadata = value
        return self
      }
      public func clearMetadata() -> Common.Meeting.Builder {
        builderResult.metadata.removeAll(keepCapacity: false)
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Common.Meeting.Builder {
        builderResult = Common.Meeting()
        return self
      }
      public override func clone() throws -> Common.Meeting.Builder {
        return try Common.Meeting.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Common.Meeting {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Common.Meeting {
        let returnMe:Common.Meeting = builderResult
        return returnMe
      }
      public func mergeFrom(other:Common.Meeting) throws -> Common.Meeting.Builder {
        if other == Common.Meeting() {
         return self
        }
        if other.hasId {
             id = other.id
        }
        if other.hasSectionId {
             sectionId = other.sectionId
        }
        if other.hasRoom {
             room = other.room
        }
        if other.hasDay {
             day = other.day
        }
        if other.hasStartTime {
             startTime = other.startTime
        }
        if other.hasEndTime {
             endTime = other.endTime
        }
        if other.hasClassType {
             classType = other.classType
        }
        if other.hasIndex {
             index = other.index
        }
        if !other.metadata.isEmpty  {
           builderResult.metadata += other.metadata
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Common.Meeting.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Common.Meeting.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            id = try input.readInt64()

          case 16 :
            sectionId = try input.readInt64()

          case 26 :
            room = try input.readString()

          case 34 :
            day = try input.readString()

          case 42 :
            startTime = try input.readString()

          case 50 :
            endTime = try input.readString()

          case 58 :
            classType = try input.readString()

          case 64 :
            index = try input.readInt32()

          case 74 :
            let subBuilder = Common.Metadata.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            metadata += [subBuilder.buildPartial()]

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class Instructor : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var id:Int64 = Int64(0)

    public private(set) var hasId:Bool = false
    public private(set) var sectionId:Int64 = Int64(0)

    public private(set) var hasSectionId:Bool = false
    public private(set) var name:String = ""

    public private(set) var hasName:Bool = false
    public private(set) var index:Int32 = Int32(0)

    public private(set) var hasIndex:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasId {
        try output.writeInt64(1, value:id)
      }
      if hasSectionId {
        try output.writeInt64(2, value:sectionId)
      }
      if hasName {
        try output.writeString(3, value:name)
      }
      if hasIndex {
        try output.writeInt32(4, value:index)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasId {
        serialize_size += id.computeInt64Size(1)
      }
      if hasSectionId {
        serialize_size += sectionId.computeInt64Size(2)
      }
      if hasName {
        serialize_size += name.computeStringSize(3)
      }
      if hasIndex {
        serialize_size += index.computeInt32Size(4)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Common.Instructor> {
      var mergedArray = Array<Common.Instructor>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Common.Instructor? {
      return try Common.Instructor.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Common.Instructor {
      return try Common.Instructor.Builder().mergeFromData(data, extensionRegistry:Common.ModelRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Common.Instructor {
      return try Common.Instructor.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Common.Instructor {
      return try Common.Instructor.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Common.Instructor {
      return try Common.Instructor.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Common.Instructor {
      return try Common.Instructor.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Common.Instructor {
      return try Common.Instructor.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Common.Instructor.Builder {
      return Common.Instructor.classBuilder() as! Common.Instructor.Builder
    }
    public func getBuilder() -> Common.Instructor.Builder {
      return classBuilder() as! Common.Instructor.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Common.Instructor.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Common.Instructor.Builder()
    }
    public func toBuilder() throws -> Common.Instructor.Builder {
      return try Common.Instructor.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Common.Instructor) throws -> Common.Instructor.Builder {
      return try Common.Instructor.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasSectionId {
        output += "\(indent) sectionId: \(sectionId) \n"
      }
      if hasName {
        output += "\(indent) name: \(name) \n"
      }
      if hasIndex {
        output += "\(indent) index: \(index) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasSectionId {
               hashCode = (hashCode &* 31) &+ sectionId.hashValue
            }
            if hasName {
               hashCode = (hashCode &* 31) &+ name.hashValue
            }
            if hasIndex {
               hashCode = (hashCode &* 31) &+ index.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Common.Instructor"
    }
    override public func className() -> String {
        return "Common.Instructor"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Common.Instructor.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Common.Instructor = Common.Instructor()
      public func getMessage() -> Common.Instructor {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasId:Bool {
           get {
                return builderResult.hasId
           }
      }
      public var id:Int64 {
           get {
                return builderResult.id
           }
           set (value) {
               builderResult.hasId = true
               builderResult.id = value
           }
      }
      public func setId(value:Int64) -> Common.Instructor.Builder {
        self.id = value
        return self
      }
      public func clearId() -> Common.Instructor.Builder{
           builderResult.hasId = false
           builderResult.id = Int64(0)
           return self
      }
      public var hasSectionId:Bool {
           get {
                return builderResult.hasSectionId
           }
      }
      public var sectionId:Int64 {
           get {
                return builderResult.sectionId
           }
           set (value) {
               builderResult.hasSectionId = true
               builderResult.sectionId = value
           }
      }
      public func setSectionId(value:Int64) -> Common.Instructor.Builder {
        self.sectionId = value
        return self
      }
      public func clearSectionId() -> Common.Instructor.Builder{
           builderResult.hasSectionId = false
           builderResult.sectionId = Int64(0)
           return self
      }
      public var hasName:Bool {
           get {
                return builderResult.hasName
           }
      }
      public var name:String {
           get {
                return builderResult.name
           }
           set (value) {
               builderResult.hasName = true
               builderResult.name = value
           }
      }
      public func setName(value:String) -> Common.Instructor.Builder {
        self.name = value
        return self
      }
      public func clearName() -> Common.Instructor.Builder{
           builderResult.hasName = false
           builderResult.name = ""
           return self
      }
      public var hasIndex:Bool {
           get {
                return builderResult.hasIndex
           }
      }
      public var index:Int32 {
           get {
                return builderResult.index
           }
           set (value) {
               builderResult.hasIndex = true
               builderResult.index = value
           }
      }
      public func setIndex(value:Int32) -> Common.Instructor.Builder {
        self.index = value
        return self
      }
      public func clearIndex() -> Common.Instructor.Builder{
           builderResult.hasIndex = false
           builderResult.index = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Common.Instructor.Builder {
        builderResult = Common.Instructor()
        return self
      }
      public override func clone() throws -> Common.Instructor.Builder {
        return try Common.Instructor.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Common.Instructor {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Common.Instructor {
        let returnMe:Common.Instructor = builderResult
        return returnMe
      }
      public func mergeFrom(other:Common.Instructor) throws -> Common.Instructor.Builder {
        if other == Common.Instructor() {
         return self
        }
        if other.hasId {
             id = other.id
        }
        if other.hasSectionId {
             sectionId = other.sectionId
        }
        if other.hasName {
             name = other.name
        }
        if other.hasIndex {
             index = other.index
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Common.Instructor.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Common.Instructor.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            id = try input.readInt64()

          case 16 :
            sectionId = try input.readInt64()

          case 26 :
            name = try input.readString()

          case 32 :
            index = try input.readInt32()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class Book : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var id:Int64 = Int64(0)

    public private(set) var hasId:Bool = false
    public private(set) var sectionId:Int64 = Int64(0)

    public private(set) var hasSectionId:Bool = false
    public private(set) var title:String = ""

    public private(set) var hasTitle:Bool = false
    public private(set) var url:String = ""

    public private(set) var hasUrl:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasId {
        try output.writeInt64(1, value:id)
      }
      if hasSectionId {
        try output.writeInt64(2, value:sectionId)
      }
      if hasTitle {
        try output.writeString(3, value:title)
      }
      if hasUrl {
        try output.writeString(4, value:url)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasId {
        serialize_size += id.computeInt64Size(1)
      }
      if hasSectionId {
        serialize_size += sectionId.computeInt64Size(2)
      }
      if hasTitle {
        serialize_size += title.computeStringSize(3)
      }
      if hasUrl {
        serialize_size += url.computeStringSize(4)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Common.Book> {
      var mergedArray = Array<Common.Book>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Common.Book? {
      return try Common.Book.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Common.Book {
      return try Common.Book.Builder().mergeFromData(data, extensionRegistry:Common.ModelRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Common.Book {
      return try Common.Book.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Common.Book {
      return try Common.Book.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Common.Book {
      return try Common.Book.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Common.Book {
      return try Common.Book.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Common.Book {
      return try Common.Book.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Common.Book.Builder {
      return Common.Book.classBuilder() as! Common.Book.Builder
    }
    public func getBuilder() -> Common.Book.Builder {
      return classBuilder() as! Common.Book.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Common.Book.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Common.Book.Builder()
    }
    public func toBuilder() throws -> Common.Book.Builder {
      return try Common.Book.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Common.Book) throws -> Common.Book.Builder {
      return try Common.Book.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasSectionId {
        output += "\(indent) sectionId: \(sectionId) \n"
      }
      if hasTitle {
        output += "\(indent) title: \(title) \n"
      }
      if hasUrl {
        output += "\(indent) url: \(url) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasSectionId {
               hashCode = (hashCode &* 31) &+ sectionId.hashValue
            }
            if hasTitle {
               hashCode = (hashCode &* 31) &+ title.hashValue
            }
            if hasUrl {
               hashCode = (hashCode &* 31) &+ url.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Common.Book"
    }
    override public func className() -> String {
        return "Common.Book"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Common.Book.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Common.Book = Common.Book()
      public func getMessage() -> Common.Book {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasId:Bool {
           get {
                return builderResult.hasId
           }
      }
      public var id:Int64 {
           get {
                return builderResult.id
           }
           set (value) {
               builderResult.hasId = true
               builderResult.id = value
           }
      }
      public func setId(value:Int64) -> Common.Book.Builder {
        self.id = value
        return self
      }
      public func clearId() -> Common.Book.Builder{
           builderResult.hasId = false
           builderResult.id = Int64(0)
           return self
      }
      public var hasSectionId:Bool {
           get {
                return builderResult.hasSectionId
           }
      }
      public var sectionId:Int64 {
           get {
                return builderResult.sectionId
           }
           set (value) {
               builderResult.hasSectionId = true
               builderResult.sectionId = value
           }
      }
      public func setSectionId(value:Int64) -> Common.Book.Builder {
        self.sectionId = value
        return self
      }
      public func clearSectionId() -> Common.Book.Builder{
           builderResult.hasSectionId = false
           builderResult.sectionId = Int64(0)
           return self
      }
      public var hasTitle:Bool {
           get {
                return builderResult.hasTitle
           }
      }
      public var title:String {
           get {
                return builderResult.title
           }
           set (value) {
               builderResult.hasTitle = true
               builderResult.title = value
           }
      }
      public func setTitle(value:String) -> Common.Book.Builder {
        self.title = value
        return self
      }
      public func clearTitle() -> Common.Book.Builder{
           builderResult.hasTitle = false
           builderResult.title = ""
           return self
      }
      public var hasUrl:Bool {
           get {
                return builderResult.hasUrl
           }
      }
      public var url:String {
           get {
                return builderResult.url
           }
           set (value) {
               builderResult.hasUrl = true
               builderResult.url = value
           }
      }
      public func setUrl(value:String) -> Common.Book.Builder {
        self.url = value
        return self
      }
      public func clearUrl() -> Common.Book.Builder{
           builderResult.hasUrl = false
           builderResult.url = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Common.Book.Builder {
        builderResult = Common.Book()
        return self
      }
      public override func clone() throws -> Common.Book.Builder {
        return try Common.Book.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Common.Book {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Common.Book {
        let returnMe:Common.Book = builderResult
        return returnMe
      }
      public func mergeFrom(other:Common.Book) throws -> Common.Book.Builder {
        if other == Common.Book() {
         return self
        }
        if other.hasId {
             id = other.id
        }
        if other.hasSectionId {
             sectionId = other.sectionId
        }
        if other.hasTitle {
             title = other.title
        }
        if other.hasUrl {
             url = other.url
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Common.Book.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Common.Book.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            id = try input.readInt64()

          case 16 :
            sectionId = try input.readInt64()

          case 26 :
            title = try input.readString()

          case 34 :
            url = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class Metadata : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var id:Int64 = Int64(0)

    public private(set) var hasId:Bool = false
    public private(set) var universityId:Int64 = Int64(0)

    public private(set) var hasUniversityId:Bool = false
    public private(set) var subjectId:Int64 = Int64(0)

    public private(set) var hasSubjectId:Bool = false
    public private(set) var courseId:Int64 = Int64(0)

    public private(set) var hasCourseId:Bool = false
    public private(set) var sectionId:Int64 = Int64(0)

    public private(set) var hasSectionId:Bool = false
    public private(set) var meetingId:Int64 = Int64(0)

    public private(set) var hasMeetingId:Bool = false
    public private(set) var title:String = ""

    public private(set) var hasTitle:Bool = false
    public private(set) var content:String = ""

    public private(set) var hasContent:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasId {
        try output.writeInt64(1, value:id)
      }
      if hasUniversityId {
        try output.writeInt64(2, value:universityId)
      }
      if hasSubjectId {
        try output.writeInt64(3, value:subjectId)
      }
      if hasCourseId {
        try output.writeInt64(4, value:courseId)
      }
      if hasSectionId {
        try output.writeInt64(5, value:sectionId)
      }
      if hasMeetingId {
        try output.writeInt64(6, value:meetingId)
      }
      if hasTitle {
        try output.writeString(7, value:title)
      }
      if hasContent {
        try output.writeString(8, value:content)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasId {
        serialize_size += id.computeInt64Size(1)
      }
      if hasUniversityId {
        serialize_size += universityId.computeInt64Size(2)
      }
      if hasSubjectId {
        serialize_size += subjectId.computeInt64Size(3)
      }
      if hasCourseId {
        serialize_size += courseId.computeInt64Size(4)
      }
      if hasSectionId {
        serialize_size += sectionId.computeInt64Size(5)
      }
      if hasMeetingId {
        serialize_size += meetingId.computeInt64Size(6)
      }
      if hasTitle {
        serialize_size += title.computeStringSize(7)
      }
      if hasContent {
        serialize_size += content.computeStringSize(8)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Common.Metadata> {
      var mergedArray = Array<Common.Metadata>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Common.Metadata? {
      return try Common.Metadata.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Common.Metadata {
      return try Common.Metadata.Builder().mergeFromData(data, extensionRegistry:Common.ModelRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Common.Metadata {
      return try Common.Metadata.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Common.Metadata {
      return try Common.Metadata.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Common.Metadata {
      return try Common.Metadata.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Common.Metadata {
      return try Common.Metadata.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Common.Metadata {
      return try Common.Metadata.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Common.Metadata.Builder {
      return Common.Metadata.classBuilder() as! Common.Metadata.Builder
    }
    public func getBuilder() -> Common.Metadata.Builder {
      return classBuilder() as! Common.Metadata.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Common.Metadata.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Common.Metadata.Builder()
    }
    public func toBuilder() throws -> Common.Metadata.Builder {
      return try Common.Metadata.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Common.Metadata) throws -> Common.Metadata.Builder {
      return try Common.Metadata.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasUniversityId {
        output += "\(indent) universityId: \(universityId) \n"
      }
      if hasSubjectId {
        output += "\(indent) subjectId: \(subjectId) \n"
      }
      if hasCourseId {
        output += "\(indent) courseId: \(courseId) \n"
      }
      if hasSectionId {
        output += "\(indent) sectionId: \(sectionId) \n"
      }
      if hasMeetingId {
        output += "\(indent) meetingId: \(meetingId) \n"
      }
      if hasTitle {
        output += "\(indent) title: \(title) \n"
      }
      if hasContent {
        output += "\(indent) content: \(content) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasUniversityId {
               hashCode = (hashCode &* 31) &+ universityId.hashValue
            }
            if hasSubjectId {
               hashCode = (hashCode &* 31) &+ subjectId.hashValue
            }
            if hasCourseId {
               hashCode = (hashCode &* 31) &+ courseId.hashValue
            }
            if hasSectionId {
               hashCode = (hashCode &* 31) &+ sectionId.hashValue
            }
            if hasMeetingId {
               hashCode = (hashCode &* 31) &+ meetingId.hashValue
            }
            if hasTitle {
               hashCode = (hashCode &* 31) &+ title.hashValue
            }
            if hasContent {
               hashCode = (hashCode &* 31) &+ content.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Common.Metadata"
    }
    override public func className() -> String {
        return "Common.Metadata"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Common.Metadata.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Common.Metadata = Common.Metadata()
      public func getMessage() -> Common.Metadata {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasId:Bool {
           get {
                return builderResult.hasId
           }
      }
      public var id:Int64 {
           get {
                return builderResult.id
           }
           set (value) {
               builderResult.hasId = true
               builderResult.id = value
           }
      }
      public func setId(value:Int64) -> Common.Metadata.Builder {
        self.id = value
        return self
      }
      public func clearId() -> Common.Metadata.Builder{
           builderResult.hasId = false
           builderResult.id = Int64(0)
           return self
      }
      public var hasUniversityId:Bool {
           get {
                return builderResult.hasUniversityId
           }
      }
      public var universityId:Int64 {
           get {
                return builderResult.universityId
           }
           set (value) {
               builderResult.hasUniversityId = true
               builderResult.universityId = value
           }
      }
      public func setUniversityId(value:Int64) -> Common.Metadata.Builder {
        self.universityId = value
        return self
      }
      public func clearUniversityId() -> Common.Metadata.Builder{
           builderResult.hasUniversityId = false
           builderResult.universityId = Int64(0)
           return self
      }
      public var hasSubjectId:Bool {
           get {
                return builderResult.hasSubjectId
           }
      }
      public var subjectId:Int64 {
           get {
                return builderResult.subjectId
           }
           set (value) {
               builderResult.hasSubjectId = true
               builderResult.subjectId = value
           }
      }
      public func setSubjectId(value:Int64) -> Common.Metadata.Builder {
        self.subjectId = value
        return self
      }
      public func clearSubjectId() -> Common.Metadata.Builder{
           builderResult.hasSubjectId = false
           builderResult.subjectId = Int64(0)
           return self
      }
      public var hasCourseId:Bool {
           get {
                return builderResult.hasCourseId
           }
      }
      public var courseId:Int64 {
           get {
                return builderResult.courseId
           }
           set (value) {
               builderResult.hasCourseId = true
               builderResult.courseId = value
           }
      }
      public func setCourseId(value:Int64) -> Common.Metadata.Builder {
        self.courseId = value
        return self
      }
      public func clearCourseId() -> Common.Metadata.Builder{
           builderResult.hasCourseId = false
           builderResult.courseId = Int64(0)
           return self
      }
      public var hasSectionId:Bool {
           get {
                return builderResult.hasSectionId
           }
      }
      public var sectionId:Int64 {
           get {
                return builderResult.sectionId
           }
           set (value) {
               builderResult.hasSectionId = true
               builderResult.sectionId = value
           }
      }
      public func setSectionId(value:Int64) -> Common.Metadata.Builder {
        self.sectionId = value
        return self
      }
      public func clearSectionId() -> Common.Metadata.Builder{
           builderResult.hasSectionId = false
           builderResult.sectionId = Int64(0)
           return self
      }
      public var hasMeetingId:Bool {
           get {
                return builderResult.hasMeetingId
           }
      }
      public var meetingId:Int64 {
           get {
                return builderResult.meetingId
           }
           set (value) {
               builderResult.hasMeetingId = true
               builderResult.meetingId = value
           }
      }
      public func setMeetingId(value:Int64) -> Common.Metadata.Builder {
        self.meetingId = value
        return self
      }
      public func clearMeetingId() -> Common.Metadata.Builder{
           builderResult.hasMeetingId = false
           builderResult.meetingId = Int64(0)
           return self
      }
      public var hasTitle:Bool {
           get {
                return builderResult.hasTitle
           }
      }
      public var title:String {
           get {
                return builderResult.title
           }
           set (value) {
               builderResult.hasTitle = true
               builderResult.title = value
           }
      }
      public func setTitle(value:String) -> Common.Metadata.Builder {
        self.title = value
        return self
      }
      public func clearTitle() -> Common.Metadata.Builder{
           builderResult.hasTitle = false
           builderResult.title = ""
           return self
      }
      public var hasContent:Bool {
           get {
                return builderResult.hasContent
           }
      }
      public var content:String {
           get {
                return builderResult.content
           }
           set (value) {
               builderResult.hasContent = true
               builderResult.content = value
           }
      }
      public func setContent(value:String) -> Common.Metadata.Builder {
        self.content = value
        return self
      }
      public func clearContent() -> Common.Metadata.Builder{
           builderResult.hasContent = false
           builderResult.content = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Common.Metadata.Builder {
        builderResult = Common.Metadata()
        return self
      }
      public override func clone() throws -> Common.Metadata.Builder {
        return try Common.Metadata.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Common.Metadata {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Common.Metadata {
        let returnMe:Common.Metadata = builderResult
        return returnMe
      }
      public func mergeFrom(other:Common.Metadata) throws -> Common.Metadata.Builder {
        if other == Common.Metadata() {
         return self
        }
        if other.hasId {
             id = other.id
        }
        if other.hasUniversityId {
             universityId = other.universityId
        }
        if other.hasSubjectId {
             subjectId = other.subjectId
        }
        if other.hasCourseId {
             courseId = other.courseId
        }
        if other.hasSectionId {
             sectionId = other.sectionId
        }
        if other.hasMeetingId {
             meetingId = other.meetingId
        }
        if other.hasTitle {
             title = other.title
        }
        if other.hasContent {
             content = other.content
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Common.Metadata.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Common.Metadata.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            id = try input.readInt64()

          case 16 :
            universityId = try input.readInt64()

          case 24 :
            subjectId = try input.readInt64()

          case 32 :
            courseId = try input.readInt64()

          case 40 :
            sectionId = try input.readInt64()

          case 48 :
            meetingId = try input.readInt64()

          case 58 :
            title = try input.readString()

          case 66 :
            content = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class Registration : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var id:Int64 = Int64(0)

    public private(set) var hasId:Bool = false
    public private(set) var universityId:Int64 = Int64(0)

    public private(set) var hasUniversityId:Bool = false
    public private(set) var period:String = ""

    public private(set) var hasPeriod:Bool = false
    public private(set) var periodDate:Int64 = Int64(0)

    public private(set) var hasPeriodDate:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasId {
        try output.writeInt64(1, value:id)
      }
      if hasUniversityId {
        try output.writeInt64(2, value:universityId)
      }
      if hasPeriod {
        try output.writeString(3, value:period)
      }
      if hasPeriodDate {
        try output.writeInt64(4, value:periodDate)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasId {
        serialize_size += id.computeInt64Size(1)
      }
      if hasUniversityId {
        serialize_size += universityId.computeInt64Size(2)
      }
      if hasPeriod {
        serialize_size += period.computeStringSize(3)
      }
      if hasPeriodDate {
        serialize_size += periodDate.computeInt64Size(4)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Common.Registration> {
      var mergedArray = Array<Common.Registration>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Common.Registration? {
      return try Common.Registration.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Common.Registration {
      return try Common.Registration.Builder().mergeFromData(data, extensionRegistry:Common.ModelRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Common.Registration {
      return try Common.Registration.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Common.Registration {
      return try Common.Registration.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Common.Registration {
      return try Common.Registration.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Common.Registration {
      return try Common.Registration.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Common.Registration {
      return try Common.Registration.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Common.Registration.Builder {
      return Common.Registration.classBuilder() as! Common.Registration.Builder
    }
    public func getBuilder() -> Common.Registration.Builder {
      return classBuilder() as! Common.Registration.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Common.Registration.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Common.Registration.Builder()
    }
    public func toBuilder() throws -> Common.Registration.Builder {
      return try Common.Registration.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Common.Registration) throws -> Common.Registration.Builder {
      return try Common.Registration.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasUniversityId {
        output += "\(indent) universityId: \(universityId) \n"
      }
      if hasPeriod {
        output += "\(indent) period: \(period) \n"
      }
      if hasPeriodDate {
        output += "\(indent) periodDate: \(periodDate) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasUniversityId {
               hashCode = (hashCode &* 31) &+ universityId.hashValue
            }
            if hasPeriod {
               hashCode = (hashCode &* 31) &+ period.hashValue
            }
            if hasPeriodDate {
               hashCode = (hashCode &* 31) &+ periodDate.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Common.Registration"
    }
    override public func className() -> String {
        return "Common.Registration"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Common.Registration.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Common.Registration = Common.Registration()
      public func getMessage() -> Common.Registration {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasId:Bool {
           get {
                return builderResult.hasId
           }
      }
      public var id:Int64 {
           get {
                return builderResult.id
           }
           set (value) {
               builderResult.hasId = true
               builderResult.id = value
           }
      }
      public func setId(value:Int64) -> Common.Registration.Builder {
        self.id = value
        return self
      }
      public func clearId() -> Common.Registration.Builder{
           builderResult.hasId = false
           builderResult.id = Int64(0)
           return self
      }
      public var hasUniversityId:Bool {
           get {
                return builderResult.hasUniversityId
           }
      }
      public var universityId:Int64 {
           get {
                return builderResult.universityId
           }
           set (value) {
               builderResult.hasUniversityId = true
               builderResult.universityId = value
           }
      }
      public func setUniversityId(value:Int64) -> Common.Registration.Builder {
        self.universityId = value
        return self
      }
      public func clearUniversityId() -> Common.Registration.Builder{
           builderResult.hasUniversityId = false
           builderResult.universityId = Int64(0)
           return self
      }
      public var hasPeriod:Bool {
           get {
                return builderResult.hasPeriod
           }
      }
      public var period:String {
           get {
                return builderResult.period
           }
           set (value) {
               builderResult.hasPeriod = true
               builderResult.period = value
           }
      }
      public func setPeriod(value:String) -> Common.Registration.Builder {
        self.period = value
        return self
      }
      public func clearPeriod() -> Common.Registration.Builder{
           builderResult.hasPeriod = false
           builderResult.period = ""
           return self
      }
      public var hasPeriodDate:Bool {
           get {
                return builderResult.hasPeriodDate
           }
      }
      public var periodDate:Int64 {
           get {
                return builderResult.periodDate
           }
           set (value) {
               builderResult.hasPeriodDate = true
               builderResult.periodDate = value
           }
      }
      public func setPeriodDate(value:Int64) -> Common.Registration.Builder {
        self.periodDate = value
        return self
      }
      public func clearPeriodDate() -> Common.Registration.Builder{
           builderResult.hasPeriodDate = false
           builderResult.periodDate = Int64(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Common.Registration.Builder {
        builderResult = Common.Registration()
        return self
      }
      public override func clone() throws -> Common.Registration.Builder {
        return try Common.Registration.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Common.Registration {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Common.Registration {
        let returnMe:Common.Registration = builderResult
        return returnMe
      }
      public func mergeFrom(other:Common.Registration) throws -> Common.Registration.Builder {
        if other == Common.Registration() {
         return self
        }
        if other.hasId {
             id = other.id
        }
        if other.hasUniversityId {
             universityId = other.universityId
        }
        if other.hasPeriod {
             period = other.period
        }
        if other.hasPeriodDate {
             periodDate = other.periodDate
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Common.Registration.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Common.Registration.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            id = try input.readInt64()

          case 16 :
            universityId = try input.readInt64()

          case 26 :
            period = try input.readString()

          case 32 :
            periodDate = try input.readInt64()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class ResolvedSemester : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var current:Common.Semester!
    public private(set) var hasCurrent:Bool = false
    public private(set) var last:Common.Semester!
    public private(set) var hasLast:Bool = false
    public private(set) var next:Common.Semester!
    public private(set) var hasNext:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasCurrent {
        try output.writeMessage(1, value:current)
      }
      if hasLast {
        try output.writeMessage(2, value:last)
      }
      if hasNext {
        try output.writeMessage(3, value:next)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasCurrent {
          if let varSizecurrent = current?.computeMessageSize(1) {
              serialize_size += varSizecurrent
          }
      }
      if hasLast {
          if let varSizelast = last?.computeMessageSize(2) {
              serialize_size += varSizelast
          }
      }
      if hasNext {
          if let varSizenext = next?.computeMessageSize(3) {
              serialize_size += varSizenext
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Common.ResolvedSemester> {
      var mergedArray = Array<Common.ResolvedSemester>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Common.ResolvedSemester? {
      return try Common.ResolvedSemester.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Common.ResolvedSemester {
      return try Common.ResolvedSemester.Builder().mergeFromData(data, extensionRegistry:Common.ModelRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Common.ResolvedSemester {
      return try Common.ResolvedSemester.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Common.ResolvedSemester {
      return try Common.ResolvedSemester.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Common.ResolvedSemester {
      return try Common.ResolvedSemester.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Common.ResolvedSemester {
      return try Common.ResolvedSemester.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Common.ResolvedSemester {
      return try Common.ResolvedSemester.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Common.ResolvedSemester.Builder {
      return Common.ResolvedSemester.classBuilder() as! Common.ResolvedSemester.Builder
    }
    public func getBuilder() -> Common.ResolvedSemester.Builder {
      return classBuilder() as! Common.ResolvedSemester.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Common.ResolvedSemester.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Common.ResolvedSemester.Builder()
    }
    public func toBuilder() throws -> Common.ResolvedSemester.Builder {
      return try Common.ResolvedSemester.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Common.ResolvedSemester) throws -> Common.ResolvedSemester.Builder {
      return try Common.ResolvedSemester.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasCurrent {
        output += "\(indent) current {\n"
        if let outDescCurrent = current {
          output += try outDescCurrent.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasLast {
        output += "\(indent) last {\n"
        if let outDescLast = last {
          output += try outDescLast.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasNext {
        output += "\(indent) next {\n"
        if let outDescNext = next {
          output += try outDescNext.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasCurrent {
                if let hashValuecurrent = current?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuecurrent
                }
            }
            if hasLast {
                if let hashValuelast = last?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuelast
                }
            }
            if hasNext {
                if let hashValuenext = next?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuenext
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Common.ResolvedSemester"
    }
    override public func className() -> String {
        return "Common.ResolvedSemester"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Common.ResolvedSemester.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Common.ResolvedSemester = Common.ResolvedSemester()
      public func getMessage() -> Common.ResolvedSemester {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasCurrent:Bool {
           get {
               return builderResult.hasCurrent
           }
      }
      public var current:Common.Semester! {
           get {
               if currentBuilder_ != nil {
                  builderResult.current = currentBuilder_.getMessage()
               }
               return builderResult.current
           }
           set (value) {
               builderResult.hasCurrent = true
               builderResult.current = value
           }
      }
      private var currentBuilder_:Common.Semester.Builder! {
           didSet {
              builderResult.hasCurrent = true
           }
      }
      public func getCurrentBuilder() -> Common.Semester.Builder {
        if currentBuilder_ == nil {
           currentBuilder_ = Common.Semester.Builder()
           builderResult.current = currentBuilder_.getMessage()
           if current != nil {
              try! currentBuilder_.mergeFrom(current)
           }
        }
        return currentBuilder_
      }
      public func setCurrent(value:Common.Semester!) -> Common.ResolvedSemester.Builder {
        self.current = value
        return self
      }
      public func mergeCurrent(value:Common.Semester) throws -> Common.ResolvedSemester.Builder {
        if builderResult.hasCurrent {
          builderResult.current = try Common.Semester.builderWithPrototype(builderResult.current).mergeFrom(value).buildPartial()
        } else {
          builderResult.current = value
        }
        builderResult.hasCurrent = true
        return self
      }
      public func clearCurrent() -> Common.ResolvedSemester.Builder {
        currentBuilder_ = nil
        builderResult.hasCurrent = false
        builderResult.current = nil
        return self
      }
      public var hasLast:Bool {
           get {
               return builderResult.hasLast
           }
      }
      public var last:Common.Semester! {
           get {
               if lastBuilder_ != nil {
                  builderResult.last = lastBuilder_.getMessage()
               }
               return builderResult.last
           }
           set (value) {
               builderResult.hasLast = true
               builderResult.last = value
           }
      }
      private var lastBuilder_:Common.Semester.Builder! {
           didSet {
              builderResult.hasLast = true
           }
      }
      public func getLastBuilder() -> Common.Semester.Builder {
        if lastBuilder_ == nil {
           lastBuilder_ = Common.Semester.Builder()
           builderResult.last = lastBuilder_.getMessage()
           if last != nil {
              try! lastBuilder_.mergeFrom(last)
           }
        }
        return lastBuilder_
      }
      public func setLast(value:Common.Semester!) -> Common.ResolvedSemester.Builder {
        self.last = value
        return self
      }
      public func mergeLast(value:Common.Semester) throws -> Common.ResolvedSemester.Builder {
        if builderResult.hasLast {
          builderResult.last = try Common.Semester.builderWithPrototype(builderResult.last).mergeFrom(value).buildPartial()
        } else {
          builderResult.last = value
        }
        builderResult.hasLast = true
        return self
      }
      public func clearLast() -> Common.ResolvedSemester.Builder {
        lastBuilder_ = nil
        builderResult.hasLast = false
        builderResult.last = nil
        return self
      }
      public var hasNext:Bool {
           get {
               return builderResult.hasNext
           }
      }
      public var next:Common.Semester! {
           get {
               if nextBuilder_ != nil {
                  builderResult.next = nextBuilder_.getMessage()
               }
               return builderResult.next
           }
           set (value) {
               builderResult.hasNext = true
               builderResult.next = value
           }
      }
      private var nextBuilder_:Common.Semester.Builder! {
           didSet {
              builderResult.hasNext = true
           }
      }
      public func getNextBuilder() -> Common.Semester.Builder {
        if nextBuilder_ == nil {
           nextBuilder_ = Common.Semester.Builder()
           builderResult.next = nextBuilder_.getMessage()
           if next != nil {
              try! nextBuilder_.mergeFrom(next)
           }
        }
        return nextBuilder_
      }
      public func setNext(value:Common.Semester!) -> Common.ResolvedSemester.Builder {
        self.next = value
        return self
      }
      public func mergeNext(value:Common.Semester) throws -> Common.ResolvedSemester.Builder {
        if builderResult.hasNext {
          builderResult.next = try Common.Semester.builderWithPrototype(builderResult.next).mergeFrom(value).buildPartial()
        } else {
          builderResult.next = value
        }
        builderResult.hasNext = true
        return self
      }
      public func clearNext() -> Common.ResolvedSemester.Builder {
        nextBuilder_ = nil
        builderResult.hasNext = false
        builderResult.next = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Common.ResolvedSemester.Builder {
        builderResult = Common.ResolvedSemester()
        return self
      }
      public override func clone() throws -> Common.ResolvedSemester.Builder {
        return try Common.ResolvedSemester.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Common.ResolvedSemester {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Common.ResolvedSemester {
        let returnMe:Common.ResolvedSemester = builderResult
        return returnMe
      }
      public func mergeFrom(other:Common.ResolvedSemester) throws -> Common.ResolvedSemester.Builder {
        if other == Common.ResolvedSemester() {
         return self
        }
        if (other.hasCurrent) {
            try mergeCurrent(other.current)
        }
        if (other.hasLast) {
            try mergeLast(other.last)
        }
        if (other.hasNext) {
            try mergeNext(other.next)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Common.ResolvedSemester.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Common.ResolvedSemester.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            let subBuilder:Common.Semester.Builder = Common.Semester.Builder()
            if hasCurrent {
              try subBuilder.mergeFrom(current)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            current = subBuilder.buildPartial()

          case 18 :
            let subBuilder:Common.Semester.Builder = Common.Semester.Builder()
            if hasLast {
              try subBuilder.mergeFrom(last)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            last = subBuilder.buildPartial()

          case 26 :
            let subBuilder:Common.Semester.Builder = Common.Semester.Builder()
            if hasNext {
              try subBuilder.mergeFrom(next)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            next = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class Semester : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var year:Int32 = Int32(0)

    public private(set) var hasYear:Bool = false
    public private(set) var season:String = ""

    public private(set) var hasSeason:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasYear {
        try output.writeInt32(1, value:year)
      }
      if hasSeason {
        try output.writeString(2, value:season)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasYear {
        serialize_size += year.computeInt32Size(1)
      }
      if hasSeason {
        serialize_size += season.computeStringSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Common.Semester> {
      var mergedArray = Array<Common.Semester>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Common.Semester? {
      return try Common.Semester.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Common.Semester {
      return try Common.Semester.Builder().mergeFromData(data, extensionRegistry:Common.ModelRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Common.Semester {
      return try Common.Semester.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Common.Semester {
      return try Common.Semester.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Common.Semester {
      return try Common.Semester.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Common.Semester {
      return try Common.Semester.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Common.Semester {
      return try Common.Semester.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Common.Semester.Builder {
      return Common.Semester.classBuilder() as! Common.Semester.Builder
    }
    public func getBuilder() -> Common.Semester.Builder {
      return classBuilder() as! Common.Semester.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Common.Semester.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Common.Semester.Builder()
    }
    public func toBuilder() throws -> Common.Semester.Builder {
      return try Common.Semester.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Common.Semester) throws -> Common.Semester.Builder {
      return try Common.Semester.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasYear {
        output += "\(indent) year: \(year) \n"
      }
      if hasSeason {
        output += "\(indent) season: \(season) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasYear {
               hashCode = (hashCode &* 31) &+ year.hashValue
            }
            if hasSeason {
               hashCode = (hashCode &* 31) &+ season.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Common.Semester"
    }
    override public func className() -> String {
        return "Common.Semester"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Common.Semester.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Common.Semester = Common.Semester()
      public func getMessage() -> Common.Semester {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasYear:Bool {
           get {
                return builderResult.hasYear
           }
      }
      public var year:Int32 {
           get {
                return builderResult.year
           }
           set (value) {
               builderResult.hasYear = true
               builderResult.year = value
           }
      }
      public func setYear(value:Int32) -> Common.Semester.Builder {
        self.year = value
        return self
      }
      public func clearYear() -> Common.Semester.Builder{
           builderResult.hasYear = false
           builderResult.year = Int32(0)
           return self
      }
      public var hasSeason:Bool {
           get {
                return builderResult.hasSeason
           }
      }
      public var season:String {
           get {
                return builderResult.season
           }
           set (value) {
               builderResult.hasSeason = true
               builderResult.season = value
           }
      }
      public func setSeason(value:String) -> Common.Semester.Builder {
        self.season = value
        return self
      }
      public func clearSeason() -> Common.Semester.Builder{
           builderResult.hasSeason = false
           builderResult.season = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Common.Semester.Builder {
        builderResult = Common.Semester()
        return self
      }
      public override func clone() throws -> Common.Semester.Builder {
        return try Common.Semester.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Common.Semester {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Common.Semester {
        let returnMe:Common.Semester = builderResult
        return returnMe
      }
      public func mergeFrom(other:Common.Semester) throws -> Common.Semester.Builder {
        if other == Common.Semester() {
         return self
        }
        if other.hasYear {
             year = other.year
        }
        if other.hasSeason {
             season = other.season
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Common.Semester.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Common.Semester.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            year = try input.readInt32()

          case 18 :
            season = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class Uctnotification : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var notificationId:Int64 = Int64(0)

    public private(set) var hasNotificationId:Bool = false
    public private(set) var topicName:String = ""

    public private(set) var hasTopicName:Bool = false
    public private(set) var status:String = ""

    public private(set) var hasStatus:Bool = false
    public private(set) var university:Common.University!
    public private(set) var hasUniversity:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasNotificationId {
        try output.writeInt64(1, value:notificationId)
      }
      if hasTopicName {
        try output.writeString(2, value:topicName)
      }
      if hasStatus {
        try output.writeString(3, value:status)
      }
      if hasUniversity {
        try output.writeMessage(4, value:university)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasNotificationId {
        serialize_size += notificationId.computeInt64Size(1)
      }
      if hasTopicName {
        serialize_size += topicName.computeStringSize(2)
      }
      if hasStatus {
        serialize_size += status.computeStringSize(3)
      }
      if hasUniversity {
          if let varSizeuniversity = university?.computeMessageSize(4) {
              serialize_size += varSizeuniversity
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Common.Uctnotification> {
      var mergedArray = Array<Common.Uctnotification>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Common.Uctnotification? {
      return try Common.Uctnotification.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Common.Uctnotification {
      return try Common.Uctnotification.Builder().mergeFromData(data, extensionRegistry:Common.ModelRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Common.Uctnotification {
      return try Common.Uctnotification.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Common.Uctnotification {
      return try Common.Uctnotification.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Common.Uctnotification {
      return try Common.Uctnotification.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Common.Uctnotification {
      return try Common.Uctnotification.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Common.Uctnotification {
      return try Common.Uctnotification.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Common.Uctnotification.Builder {
      return Common.Uctnotification.classBuilder() as! Common.Uctnotification.Builder
    }
    public func getBuilder() -> Common.Uctnotification.Builder {
      return classBuilder() as! Common.Uctnotification.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Common.Uctnotification.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Common.Uctnotification.Builder()
    }
    public func toBuilder() throws -> Common.Uctnotification.Builder {
      return try Common.Uctnotification.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Common.Uctnotification) throws -> Common.Uctnotification.Builder {
      return try Common.Uctnotification.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasNotificationId {
        output += "\(indent) notificationId: \(notificationId) \n"
      }
      if hasTopicName {
        output += "\(indent) topicName: \(topicName) \n"
      }
      if hasStatus {
        output += "\(indent) status: \(status) \n"
      }
      if hasUniversity {
        output += "\(indent) university {\n"
        if let outDescUniversity = university {
          output += try outDescUniversity.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasNotificationId {
               hashCode = (hashCode &* 31) &+ notificationId.hashValue
            }
            if hasTopicName {
               hashCode = (hashCode &* 31) &+ topicName.hashValue
            }
            if hasStatus {
               hashCode = (hashCode &* 31) &+ status.hashValue
            }
            if hasUniversity {
                if let hashValueuniversity = university?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueuniversity
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Common.Uctnotification"
    }
    override public func className() -> String {
        return "Common.Uctnotification"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Common.Uctnotification.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Common.Uctnotification = Common.Uctnotification()
      public func getMessage() -> Common.Uctnotification {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasNotificationId:Bool {
           get {
                return builderResult.hasNotificationId
           }
      }
      public var notificationId:Int64 {
           get {
                return builderResult.notificationId
           }
           set (value) {
               builderResult.hasNotificationId = true
               builderResult.notificationId = value
           }
      }
      public func setNotificationId(value:Int64) -> Common.Uctnotification.Builder {
        self.notificationId = value
        return self
      }
      public func clearNotificationId() -> Common.Uctnotification.Builder{
           builderResult.hasNotificationId = false
           builderResult.notificationId = Int64(0)
           return self
      }
      public var hasTopicName:Bool {
           get {
                return builderResult.hasTopicName
           }
      }
      public var topicName:String {
           get {
                return builderResult.topicName
           }
           set (value) {
               builderResult.hasTopicName = true
               builderResult.topicName = value
           }
      }
      public func setTopicName(value:String) -> Common.Uctnotification.Builder {
        self.topicName = value
        return self
      }
      public func clearTopicName() -> Common.Uctnotification.Builder{
           builderResult.hasTopicName = false
           builderResult.topicName = ""
           return self
      }
      public var hasStatus:Bool {
           get {
                return builderResult.hasStatus
           }
      }
      public var status:String {
           get {
                return builderResult.status
           }
           set (value) {
               builderResult.hasStatus = true
               builderResult.status = value
           }
      }
      public func setStatus(value:String) -> Common.Uctnotification.Builder {
        self.status = value
        return self
      }
      public func clearStatus() -> Common.Uctnotification.Builder{
           builderResult.hasStatus = false
           builderResult.status = ""
           return self
      }
      public var hasUniversity:Bool {
           get {
               return builderResult.hasUniversity
           }
      }
      public var university:Common.University! {
           get {
               if universityBuilder_ != nil {
                  builderResult.university = universityBuilder_.getMessage()
               }
               return builderResult.university
           }
           set (value) {
               builderResult.hasUniversity = true
               builderResult.university = value
           }
      }
      private var universityBuilder_:Common.University.Builder! {
           didSet {
              builderResult.hasUniversity = true
           }
      }
      public func getUniversityBuilder() -> Common.University.Builder {
        if universityBuilder_ == nil {
           universityBuilder_ = Common.University.Builder()
           builderResult.university = universityBuilder_.getMessage()
           if university != nil {
              try! universityBuilder_.mergeFrom(university)
           }
        }
        return universityBuilder_
      }
      public func setUniversity(value:Common.University!) -> Common.Uctnotification.Builder {
        self.university = value
        return self
      }
      public func mergeUniversity(value:Common.University) throws -> Common.Uctnotification.Builder {
        if builderResult.hasUniversity {
          builderResult.university = try Common.University.builderWithPrototype(builderResult.university).mergeFrom(value).buildPartial()
        } else {
          builderResult.university = value
        }
        builderResult.hasUniversity = true
        return self
      }
      public func clearUniversity() -> Common.Uctnotification.Builder {
        universityBuilder_ = nil
        builderResult.hasUniversity = false
        builderResult.university = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Common.Uctnotification.Builder {
        builderResult = Common.Uctnotification()
        return self
      }
      public override func clone() throws -> Common.Uctnotification.Builder {
        return try Common.Uctnotification.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Common.Uctnotification {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Common.Uctnotification {
        let returnMe:Common.Uctnotification = builderResult
        return returnMe
      }
      public func mergeFrom(other:Common.Uctnotification) throws -> Common.Uctnotification.Builder {
        if other == Common.Uctnotification() {
         return self
        }
        if other.hasNotificationId {
             notificationId = other.notificationId
        }
        if other.hasTopicName {
             topicName = other.topicName
        }
        if other.hasStatus {
             status = other.status
        }
        if (other.hasUniversity) {
            try mergeUniversity(other.university)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Common.Uctnotification.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Common.Uctnotification.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            notificationId = try input.readInt64()

          case 18 :
            topicName = try input.readString()

          case 26 :
            status = try input.readString()

          case 34 :
            let subBuilder:Common.University.Builder = Common.University.Builder()
            if hasUniversity {
              try subBuilder.mergeFrom(university)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            university = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class Response : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var meta:Common.Meta!
    public private(set) var hasMeta:Bool = false
    public private(set) var data:Common.Data!
    public private(set) var hasData:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasMeta {
        try output.writeMessage(1, value:meta)
      }
      if hasData {
        try output.writeMessage(2, value:data)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasMeta {
          if let varSizemeta = meta?.computeMessageSize(1) {
              serialize_size += varSizemeta
          }
      }
      if hasData {
          if let varSizedata = data?.computeMessageSize(2) {
              serialize_size += varSizedata
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Common.Response> {
      var mergedArray = Array<Common.Response>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Common.Response? {
      return try Common.Response.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Common.Response {
      return try Common.Response.Builder().mergeFromData(data, extensionRegistry:Common.ModelRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Common.Response {
      return try Common.Response.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Common.Response {
      return try Common.Response.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Common.Response {
      return try Common.Response.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Common.Response {
      return try Common.Response.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Common.Response {
      return try Common.Response.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Common.Response.Builder {
      return Common.Response.classBuilder() as! Common.Response.Builder
    }
    public func getBuilder() -> Common.Response.Builder {
      return classBuilder() as! Common.Response.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Common.Response.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Common.Response.Builder()
    }
    public func toBuilder() throws -> Common.Response.Builder {
      return try Common.Response.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Common.Response) throws -> Common.Response.Builder {
      return try Common.Response.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasMeta {
        output += "\(indent) meta {\n"
        if let outDescMeta = meta {
          output += try outDescMeta.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasData {
        output += "\(indent) data {\n"
        if let outDescData = data {
          output += try outDescData.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasMeta {
                if let hashValuemeta = meta?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuemeta
                }
            }
            if hasData {
                if let hashValuedata = data?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuedata
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Common.Response"
    }
    override public func className() -> String {
        return "Common.Response"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Common.Response.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Common.Response = Common.Response()
      public func getMessage() -> Common.Response {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasMeta:Bool {
           get {
               return builderResult.hasMeta
           }
      }
      public var meta:Common.Meta! {
           get {
               if metaBuilder_ != nil {
                  builderResult.meta = metaBuilder_.getMessage()
               }
               return builderResult.meta
           }
           set (value) {
               builderResult.hasMeta = true
               builderResult.meta = value
           }
      }
      private var metaBuilder_:Common.Meta.Builder! {
           didSet {
              builderResult.hasMeta = true
           }
      }
      public func getMetaBuilder() -> Common.Meta.Builder {
        if metaBuilder_ == nil {
           metaBuilder_ = Common.Meta.Builder()
           builderResult.meta = metaBuilder_.getMessage()
           if meta != nil {
              try! metaBuilder_.mergeFrom(meta)
           }
        }
        return metaBuilder_
      }
      public func setMeta(value:Common.Meta!) -> Common.Response.Builder {
        self.meta = value
        return self
      }
      public func mergeMeta(value:Common.Meta) throws -> Common.Response.Builder {
        if builderResult.hasMeta {
          builderResult.meta = try Common.Meta.builderWithPrototype(builderResult.meta).mergeFrom(value).buildPartial()
        } else {
          builderResult.meta = value
        }
        builderResult.hasMeta = true
        return self
      }
      public func clearMeta() -> Common.Response.Builder {
        metaBuilder_ = nil
        builderResult.hasMeta = false
        builderResult.meta = nil
        return self
      }
      public var hasData:Bool {
           get {
               return builderResult.hasData
           }
      }
      public var data:Common.Data! {
           get {
               if dataBuilder_ != nil {
                  builderResult.data = dataBuilder_.getMessage()
               }
               return builderResult.data
           }
           set (value) {
               builderResult.hasData = true
               builderResult.data = value
           }
      }
      private var dataBuilder_:Common.Data.Builder! {
           didSet {
              builderResult.hasData = true
           }
      }
      public func getDataBuilder() -> Common.Data.Builder {
        if dataBuilder_ == nil {
           dataBuilder_ = Common.Data.Builder()
           builderResult.data = dataBuilder_.getMessage()
           if data != nil {
              try! dataBuilder_.mergeFrom(data)
           }
        }
        return dataBuilder_
      }
      public func setData(value:Common.Data!) -> Common.Response.Builder {
        self.data = value
        return self
      }
      public func mergeData(value:Common.Data) throws -> Common.Response.Builder {
        if builderResult.hasData {
          builderResult.data = try Common.Data.builderWithPrototype(builderResult.data).mergeFrom(value).buildPartial()
        } else {
          builderResult.data = value
        }
        builderResult.hasData = true
        return self
      }
      public func clearData() -> Common.Response.Builder {
        dataBuilder_ = nil
        builderResult.hasData = false
        builderResult.data = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Common.Response.Builder {
        builderResult = Common.Response()
        return self
      }
      public override func clone() throws -> Common.Response.Builder {
        return try Common.Response.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Common.Response {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Common.Response {
        let returnMe:Common.Response = builderResult
        return returnMe
      }
      public func mergeFrom(other:Common.Response) throws -> Common.Response.Builder {
        if other == Common.Response() {
         return self
        }
        if (other.hasMeta) {
            try mergeMeta(other.meta)
        }
        if (other.hasData) {
            try mergeData(other.data)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Common.Response.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Common.Response.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            let subBuilder:Common.Meta.Builder = Common.Meta.Builder()
            if hasMeta {
              try subBuilder.mergeFrom(meta)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            meta = subBuilder.buildPartial()

          case 18 :
            let subBuilder:Common.Data.Builder = Common.Data.Builder()
            if hasData {
              try subBuilder.mergeFrom(data)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            data = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class Meta : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var code:Int32 = Int32(0)

    public private(set) var hasCode:Bool = false
    public private(set) var message_:String = ""

    public private(set) var hasMessage_:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasCode {
        try output.writeInt32(1, value:code)
      }
      if hasMessage_ {
        try output.writeString(2, value:message_)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasCode {
        serialize_size += code.computeInt32Size(1)
      }
      if hasMessage_ {
        serialize_size += message_.computeStringSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Common.Meta> {
      var mergedArray = Array<Common.Meta>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Common.Meta? {
      return try Common.Meta.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Common.Meta {
      return try Common.Meta.Builder().mergeFromData(data, extensionRegistry:Common.ModelRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Common.Meta {
      return try Common.Meta.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Common.Meta {
      return try Common.Meta.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Common.Meta {
      return try Common.Meta.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Common.Meta {
      return try Common.Meta.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Common.Meta {
      return try Common.Meta.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Common.Meta.Builder {
      return Common.Meta.classBuilder() as! Common.Meta.Builder
    }
    public func getBuilder() -> Common.Meta.Builder {
      return classBuilder() as! Common.Meta.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Common.Meta.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Common.Meta.Builder()
    }
    public func toBuilder() throws -> Common.Meta.Builder {
      return try Common.Meta.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Common.Meta) throws -> Common.Meta.Builder {
      return try Common.Meta.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasCode {
        output += "\(indent) code: \(code) \n"
      }
      if hasMessage_ {
        output += "\(indent) message_: \(message_) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasCode {
               hashCode = (hashCode &* 31) &+ code.hashValue
            }
            if hasMessage_ {
               hashCode = (hashCode &* 31) &+ message_.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Common.Meta"
    }
    override public func className() -> String {
        return "Common.Meta"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Common.Meta.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Common.Meta = Common.Meta()
      public func getMessage() -> Common.Meta {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasCode:Bool {
           get {
                return builderResult.hasCode
           }
      }
      public var code:Int32 {
           get {
                return builderResult.code
           }
           set (value) {
               builderResult.hasCode = true
               builderResult.code = value
           }
      }
      public func setCode(value:Int32) -> Common.Meta.Builder {
        self.code = value
        return self
      }
      public func clearCode() -> Common.Meta.Builder{
           builderResult.hasCode = false
           builderResult.code = Int32(0)
           return self
      }
      public var hasMessage_:Bool {
           get {
                return builderResult.hasMessage_
           }
      }
      public var message_:String {
           get {
                return builderResult.message_
           }
           set (value) {
               builderResult.hasMessage_ = true
               builderResult.message_ = value
           }
      }
      public func setMessage_(value:String) -> Common.Meta.Builder {
        self.message_ = value
        return self
      }
      public func clearMessage_() -> Common.Meta.Builder{
           builderResult.hasMessage_ = false
           builderResult.message_ = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Common.Meta.Builder {
        builderResult = Common.Meta()
        return self
      }
      public override func clone() throws -> Common.Meta.Builder {
        return try Common.Meta.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Common.Meta {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Common.Meta {
        let returnMe:Common.Meta = builderResult
        return returnMe
      }
      public func mergeFrom(other:Common.Meta) throws -> Common.Meta.Builder {
        if other == Common.Meta() {
         return self
        }
        if other.hasCode {
             code = other.code
        }
        if other.hasMessage_ {
             message_ = other.message_
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Common.Meta.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Common.Meta.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            code = try input.readInt32()

          case 18 :
            message_ = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class Data : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var universities:Array<Common.University>  = Array<Common.University>()
    public private(set) var subjects:Array<Common.Subject>  = Array<Common.Subject>()
    public private(set) var courses:Array<Common.Course>  = Array<Common.Course>()
    public private(set) var sections:Array<Common.Section>  = Array<Common.Section>()
    public private(set) var university:Common.University!
    public private(set) var hasUniversity:Bool = false
    public private(set) var subject:Common.Subject!
    public private(set) var hasSubject:Bool = false
    public private(set) var course:Common.Course!
    public private(set) var hasCourse:Bool = false
    public private(set) var section:Common.Section!
    public private(set) var hasSection:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      for oneElementuniversities in universities {
          try output.writeMessage(1, value:oneElementuniversities)
      }
      for oneElementsubjects in subjects {
          try output.writeMessage(2, value:oneElementsubjects)
      }
      for oneElementcourses in courses {
          try output.writeMessage(3, value:oneElementcourses)
      }
      for oneElementsections in sections {
          try output.writeMessage(4, value:oneElementsections)
      }
      if hasUniversity {
        try output.writeMessage(5, value:university)
      }
      if hasSubject {
        try output.writeMessage(6, value:subject)
      }
      if hasCourse {
        try output.writeMessage(7, value:course)
      }
      if hasSection {
        try output.writeMessage(8, value:section)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      for oneElementuniversities in universities {
          serialize_size += oneElementuniversities.computeMessageSize(1)
      }
      for oneElementsubjects in subjects {
          serialize_size += oneElementsubjects.computeMessageSize(2)
      }
      for oneElementcourses in courses {
          serialize_size += oneElementcourses.computeMessageSize(3)
      }
      for oneElementsections in sections {
          serialize_size += oneElementsections.computeMessageSize(4)
      }
      if hasUniversity {
          if let varSizeuniversity = university?.computeMessageSize(5) {
              serialize_size += varSizeuniversity
          }
      }
      if hasSubject {
          if let varSizesubject = subject?.computeMessageSize(6) {
              serialize_size += varSizesubject
          }
      }
      if hasCourse {
          if let varSizecourse = course?.computeMessageSize(7) {
              serialize_size += varSizecourse
          }
      }
      if hasSection {
          if let varSizesection = section?.computeMessageSize(8) {
              serialize_size += varSizesection
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Common.Data> {
      var mergedArray = Array<Common.Data>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Common.Data? {
      return try Common.Data.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Common.Data {
      return try Common.Data.Builder().mergeFromData(data, extensionRegistry:Common.ModelRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Common.Data {
      return try Common.Data.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Common.Data {
      return try Common.Data.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Common.Data {
      return try Common.Data.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Common.Data {
      return try Common.Data.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Common.Data {
      return try Common.Data.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Common.Data.Builder {
      return Common.Data.classBuilder() as! Common.Data.Builder
    }
    public func getBuilder() -> Common.Data.Builder {
      return classBuilder() as! Common.Data.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Common.Data.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Common.Data.Builder()
    }
    public func toBuilder() throws -> Common.Data.Builder {
      return try Common.Data.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Common.Data) throws -> Common.Data.Builder {
      return try Common.Data.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      var universitiesElementIndex:Int = 0
      for oneElementuniversities in universities {
          output += "\(indent) universities[\(universitiesElementIndex)] {\n"
          output += try oneElementuniversities.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          universitiesElementIndex += 1
      }
      var subjectsElementIndex:Int = 0
      for oneElementsubjects in subjects {
          output += "\(indent) subjects[\(subjectsElementIndex)] {\n"
          output += try oneElementsubjects.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          subjectsElementIndex += 1
      }
      var coursesElementIndex:Int = 0
      for oneElementcourses in courses {
          output += "\(indent) courses[\(coursesElementIndex)] {\n"
          output += try oneElementcourses.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          coursesElementIndex += 1
      }
      var sectionsElementIndex:Int = 0
      for oneElementsections in sections {
          output += "\(indent) sections[\(sectionsElementIndex)] {\n"
          output += try oneElementsections.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          sectionsElementIndex += 1
      }
      if hasUniversity {
        output += "\(indent) university {\n"
        if let outDescUniversity = university {
          output += try outDescUniversity.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasSubject {
        output += "\(indent) subject {\n"
        if let outDescSubject = subject {
          output += try outDescSubject.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasCourse {
        output += "\(indent) course {\n"
        if let outDescCourse = course {
          output += try outDescCourse.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasSection {
        output += "\(indent) section {\n"
        if let outDescSection = section {
          output += try outDescSection.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            for oneElementuniversities in universities {
                hashCode = (hashCode &* 31) &+ oneElementuniversities.hashValue
            }
            for oneElementsubjects in subjects {
                hashCode = (hashCode &* 31) &+ oneElementsubjects.hashValue
            }
            for oneElementcourses in courses {
                hashCode = (hashCode &* 31) &+ oneElementcourses.hashValue
            }
            for oneElementsections in sections {
                hashCode = (hashCode &* 31) &+ oneElementsections.hashValue
            }
            if hasUniversity {
                if let hashValueuniversity = university?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueuniversity
                }
            }
            if hasSubject {
                if let hashValuesubject = subject?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuesubject
                }
            }
            if hasCourse {
                if let hashValuecourse = course?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuecourse
                }
            }
            if hasSection {
                if let hashValuesection = section?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuesection
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Common.Data"
    }
    override public func className() -> String {
        return "Common.Data"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Common.Data.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Common.Data = Common.Data()
      public func getMessage() -> Common.Data {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var universities:Array<Common.University> {
           get {
               return builderResult.universities
           }
           set (value) {
               builderResult.universities = value
           }
      }
      public func setUniversities(value:Array<Common.University>) -> Common.Data.Builder {
        self.universities = value
        return self
      }
      public func clearUniversities() -> Common.Data.Builder {
        builderResult.universities.removeAll(keepCapacity: false)
        return self
      }
      public var subjects:Array<Common.Subject> {
           get {
               return builderResult.subjects
           }
           set (value) {
               builderResult.subjects = value
           }
      }
      public func setSubjects(value:Array<Common.Subject>) -> Common.Data.Builder {
        self.subjects = value
        return self
      }
      public func clearSubjects() -> Common.Data.Builder {
        builderResult.subjects.removeAll(keepCapacity: false)
        return self
      }
      public var courses:Array<Common.Course> {
           get {
               return builderResult.courses
           }
           set (value) {
               builderResult.courses = value
           }
      }
      public func setCourses(value:Array<Common.Course>) -> Common.Data.Builder {
        self.courses = value
        return self
      }
      public func clearCourses() -> Common.Data.Builder {
        builderResult.courses.removeAll(keepCapacity: false)
        return self
      }
      public var sections:Array<Common.Section> {
           get {
               return builderResult.sections
           }
           set (value) {
               builderResult.sections = value
           }
      }
      public func setSections(value:Array<Common.Section>) -> Common.Data.Builder {
        self.sections = value
        return self
      }
      public func clearSections() -> Common.Data.Builder {
        builderResult.sections.removeAll(keepCapacity: false)
        return self
      }
      public var hasUniversity:Bool {
           get {
               return builderResult.hasUniversity
           }
      }
      public var university:Common.University! {
           get {
               if universityBuilder_ != nil {
                  builderResult.university = universityBuilder_.getMessage()
               }
               return builderResult.university
           }
           set (value) {
               builderResult.hasUniversity = true
               builderResult.university = value
           }
      }
      private var universityBuilder_:Common.University.Builder! {
           didSet {
              builderResult.hasUniversity = true
           }
      }
      public func getUniversityBuilder() -> Common.University.Builder {
        if universityBuilder_ == nil {
           universityBuilder_ = Common.University.Builder()
           builderResult.university = universityBuilder_.getMessage()
           if university != nil {
              try! universityBuilder_.mergeFrom(university)
           }
        }
        return universityBuilder_
      }
      public func setUniversity(value:Common.University!) -> Common.Data.Builder {
        self.university = value
        return self
      }
      public func mergeUniversity(value:Common.University) throws -> Common.Data.Builder {
        if builderResult.hasUniversity {
          builderResult.university = try Common.University.builderWithPrototype(builderResult.university).mergeFrom(value).buildPartial()
        } else {
          builderResult.university = value
        }
        builderResult.hasUniversity = true
        return self
      }
      public func clearUniversity() -> Common.Data.Builder {
        universityBuilder_ = nil
        builderResult.hasUniversity = false
        builderResult.university = nil
        return self
      }
      public var hasSubject:Bool {
           get {
               return builderResult.hasSubject
           }
      }
      public var subject:Common.Subject! {
           get {
               if subjectBuilder_ != nil {
                  builderResult.subject = subjectBuilder_.getMessage()
               }
               return builderResult.subject
           }
           set (value) {
               builderResult.hasSubject = true
               builderResult.subject = value
           }
      }
      private var subjectBuilder_:Common.Subject.Builder! {
           didSet {
              builderResult.hasSubject = true
           }
      }
      public func getSubjectBuilder() -> Common.Subject.Builder {
        if subjectBuilder_ == nil {
           subjectBuilder_ = Common.Subject.Builder()
           builderResult.subject = subjectBuilder_.getMessage()
           if subject != nil {
              try! subjectBuilder_.mergeFrom(subject)
           }
        }
        return subjectBuilder_
      }
      public func setSubject(value:Common.Subject!) -> Common.Data.Builder {
        self.subject = value
        return self
      }
      public func mergeSubject(value:Common.Subject) throws -> Common.Data.Builder {
        if builderResult.hasSubject {
          builderResult.subject = try Common.Subject.builderWithPrototype(builderResult.subject).mergeFrom(value).buildPartial()
        } else {
          builderResult.subject = value
        }
        builderResult.hasSubject = true
        return self
      }
      public func clearSubject() -> Common.Data.Builder {
        subjectBuilder_ = nil
        builderResult.hasSubject = false
        builderResult.subject = nil
        return self
      }
      public var hasCourse:Bool {
           get {
               return builderResult.hasCourse
           }
      }
      public var course:Common.Course! {
           get {
               if courseBuilder_ != nil {
                  builderResult.course = courseBuilder_.getMessage()
               }
               return builderResult.course
           }
           set (value) {
               builderResult.hasCourse = true
               builderResult.course = value
           }
      }
      private var courseBuilder_:Common.Course.Builder! {
           didSet {
              builderResult.hasCourse = true
           }
      }
      public func getCourseBuilder() -> Common.Course.Builder {
        if courseBuilder_ == nil {
           courseBuilder_ = Common.Course.Builder()
           builderResult.course = courseBuilder_.getMessage()
           if course != nil {
              try! courseBuilder_.mergeFrom(course)
           }
        }
        return courseBuilder_
      }
      public func setCourse(value:Common.Course!) -> Common.Data.Builder {
        self.course = value
        return self
      }
      public func mergeCourse(value:Common.Course) throws -> Common.Data.Builder {
        if builderResult.hasCourse {
          builderResult.course = try Common.Course.builderWithPrototype(builderResult.course).mergeFrom(value).buildPartial()
        } else {
          builderResult.course = value
        }
        builderResult.hasCourse = true
        return self
      }
      public func clearCourse() -> Common.Data.Builder {
        courseBuilder_ = nil
        builderResult.hasCourse = false
        builderResult.course = nil
        return self
      }
      public var hasSection:Bool {
           get {
               return builderResult.hasSection
           }
      }
      public var section:Common.Section! {
           get {
               if sectionBuilder_ != nil {
                  builderResult.section = sectionBuilder_.getMessage()
               }
               return builderResult.section
           }
           set (value) {
               builderResult.hasSection = true
               builderResult.section = value
           }
      }
      private var sectionBuilder_:Common.Section.Builder! {
           didSet {
              builderResult.hasSection = true
           }
      }
      public func getSectionBuilder() -> Common.Section.Builder {
        if sectionBuilder_ == nil {
           sectionBuilder_ = Common.Section.Builder()
           builderResult.section = sectionBuilder_.getMessage()
           if section != nil {
              try! sectionBuilder_.mergeFrom(section)
           }
        }
        return sectionBuilder_
      }
      public func setSection(value:Common.Section!) -> Common.Data.Builder {
        self.section = value
        return self
      }
      public func mergeSection(value:Common.Section) throws -> Common.Data.Builder {
        if builderResult.hasSection {
          builderResult.section = try Common.Section.builderWithPrototype(builderResult.section).mergeFrom(value).buildPartial()
        } else {
          builderResult.section = value
        }
        builderResult.hasSection = true
        return self
      }
      public func clearSection() -> Common.Data.Builder {
        sectionBuilder_ = nil
        builderResult.hasSection = false
        builderResult.section = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Common.Data.Builder {
        builderResult = Common.Data()
        return self
      }
      public override func clone() throws -> Common.Data.Builder {
        return try Common.Data.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Common.Data {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Common.Data {
        let returnMe:Common.Data = builderResult
        return returnMe
      }
      public func mergeFrom(other:Common.Data) throws -> Common.Data.Builder {
        if other == Common.Data() {
         return self
        }
        if !other.universities.isEmpty  {
           builderResult.universities += other.universities
        }
        if !other.subjects.isEmpty  {
           builderResult.subjects += other.subjects
        }
        if !other.courses.isEmpty  {
           builderResult.courses += other.courses
        }
        if !other.sections.isEmpty  {
           builderResult.sections += other.sections
        }
        if (other.hasUniversity) {
            try mergeUniversity(other.university)
        }
        if (other.hasSubject) {
            try mergeSubject(other.subject)
        }
        if (other.hasCourse) {
            try mergeCourse(other.course)
        }
        if (other.hasSection) {
            try mergeSection(other.section)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Common.Data.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Common.Data.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            let subBuilder = Common.University.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            universities += [subBuilder.buildPartial()]

          case 18 :
            let subBuilder = Common.Subject.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            subjects += [subBuilder.buildPartial()]

          case 26 :
            let subBuilder = Common.Course.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            courses += [subBuilder.buildPartial()]

          case 34 :
            let subBuilder = Common.Section.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            sections += [subBuilder.buildPartial()]

          case 42 :
            let subBuilder:Common.University.Builder = Common.University.Builder()
            if hasUniversity {
              try subBuilder.mergeFrom(university)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            university = subBuilder.buildPartial()

          case 50 :
            let subBuilder:Common.Subject.Builder = Common.Subject.Builder()
            if hasSubject {
              try subBuilder.mergeFrom(subject)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            subject = subBuilder.buildPartial()

          case 58 :
            let subBuilder:Common.Course.Builder = Common.Course.Builder()
            if hasCourse {
              try subBuilder.mergeFrom(course)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            course = subBuilder.buildPartial()

          case 66 :
            let subBuilder:Common.Section.Builder = Common.Section.Builder()
            if hasSection {
              try subBuilder.mergeFrom(section)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            section = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
